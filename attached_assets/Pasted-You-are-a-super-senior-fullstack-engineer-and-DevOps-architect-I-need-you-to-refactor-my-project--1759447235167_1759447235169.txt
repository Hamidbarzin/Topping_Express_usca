You are a super senior fullstack engineer and DevOps architect.  
I need you to refactor my project into a production-grade architecture, ready to scale globally.  
This is for a logistics & marketplace platform (Topping Courier), with modules for:  
- Customer orders  
- Driver management  
- Payment (E-transfer, PayPal, Cash)  
- Email/SMS notifications  
- Admin dashboard  

### Backend
- Rewrite backend in **Python FastAPI** (instead of Node/Express).  
- Use **PostgreSQL** as the main database.  
- Create database models: Users, Drivers, Orders, Payments, Tracking.  
- Implement REST API endpoints for CRUD operations and authentication (JWT).  
- Add email/SMS notification service (configurable via environment variables).  
- Provide Dockerfile and requirements.txt for backend.  

### Frontend
- Use **React (Vite) or Next.js** with TailwindCSS.  
- Multi-step order form (pickup/delivery, vehicle selection, payment).  
- Order tracking page with status updates.  
- Admin panel for managing orders and assigning drivers.  
- Integrate with FastAPI backend.  

### DevOps / Deployment
- Create **Dockerfile** for both backend and frontend (multi-stage builds).  
- Write a `docker-compose.yml` that runs:
  - Backend (FastAPI + Uvicorn on port 10000)  
  - Frontend (React/Next.js on port 5000)  
  - PostgreSQL database  
- Ensure `.env` files are supported for DB + Email + Payment configs.  
- Add `render.yaml` for Render deployment (web service with Node 20 for frontend, Python 3.11 for backend, PostgreSQL add-on).  
- Scripts in package.json and backend:  
  - `npm run dev` → dev mode frontend (React/Vite)  
  - `npm run build && npm start` → production build frontend  
  - `uvicorn main:app --reload` → dev backend  
  - `uvicorn main:app --host 0.0.0.0 --port 10000` → production backend  

### Testing
- After refactor, confirm:
  - `docker-compose up` brings up frontend + backend + DB locally.  
  - `npm run build && npm start` serves frontend correctly from backend API.  
  - Render deploy works with one-click.  

⚡ Deliver a refactored project structure with clean code, scalable architecture, and production-ready configuration.
