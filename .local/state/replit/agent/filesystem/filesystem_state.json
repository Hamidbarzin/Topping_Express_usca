{"file_contents":{"README.md":{"content":"# Topping Courier Inc. - Stallion Express Shipping Quote Application\n\nA full-stack shipping quote application that integrates with Stallion Express API to provide real-time shipping rates with custom markup and tax calculations.\n\n## Features\n\n- **Live Stallion Express Integration**: Real rates from Stallion Express v4 API\n- **Service Selection**: Choose from multiple shipping services with delivery times\n- **Custom Pricing**: 50% markup + 13% tax applied to base rates\n- **Professional Invoices**: PDF generation with Topping Courier Inc. branding\n- **Multi-step Form**: Clean UX for entering shipping details\n- **Customer Management**: Collect customer information for invoicing\n\n## Environment Variables\n\nCreate a `.env` file in the root directory with:\n\n```\nSTALLION_TOKEN=your_stallion_express_api_token_here\nPORT=5000\nNODE_ENV=development\n```\n\n**Important**: Keep `STALLION_TOKEN` server-side only. It's never exposed to the client.\n\n## Installation & Setup\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Set up your environment variables in `.env`\n\n3. Start the development server:\n```bash\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n## API Endpoints\n\n### Health Check\n```bash\nGET /api/stallion/health\n```\nVerifies that the Stallion Express API token is working.\n\n### Get Shipping Quotes\n```bash\nPOST /api/stallion/quote\nContent-Type: application/json\n\n{\n  \"origin\": { \"country\": \"CA\", \"postal_code\": \"L4E0Y1\" },\n  \"destination\": { \"country\": \"CA\", \"postal_code\": \"V6E4R5\" },\n  \"parcels\": [{ \"weight\": 10, \"length\": 30, \"width\": 20, \"height\": 15 }]\n}\n```\n\nResponse:\n```json\n{\n  \"currency\": \"CAD\",\n  \"services\": [\n    {\n      \"carrier\": \"ICS Courier\",\n      \"service_code\": \"ground\",\n      \"service_name\": \"Ground Service\",\n      \"delivery_days\": 3,\n      \"base\": 12.38,\n      \"markup\": 6.19,\n      \"subtotal\": 18.57,\n      \"tax\": 2.41,\n      \"total\": 20.98\n    }\n  ]\n}\n```\n\n### Generate Invoice\n```bash\nPOST /api/invoice\nContent-Type: application/json\n\n{\n  \"selectedService\": { /* service object from quote response */ },\n  \"customerInfo\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"phone\": \"(416) 555-0123\",\n    \"company\": \"Acme Inc.\"\n  }\n}\n```\n\n## Acceptance Test Example\n\nTest with the following parameters to verify functionality:\n- Origin: L4E0Y1 (Richmond Hill, ON)\n- Destination: V6E4R5 (Vancouver, BC)  \n- Parcel: 10kg, 30×20×15cm\n\nExpected behavior:\n1. API returns ≥1 shipping service from Stallion Express\n2. Base rate matches `service.total` from Stallion API\n3. Final total = base × 1.5 × 1.13 (50% markup + 13% tax)\n4. Invoice generation creates PDF with TC-YYYYMMDD-#### format\n5. All pricing calculations are consistent across page refreshes\n\n## Invoice Format\n\nInvoices use the format: `TC-YYYYMMDD-####`\n- TC: Topping Courier prefix\n- YYYYMMDD: Date in year-month-day format\n- ####: 4-digit sequence number\n\n## Company Information\n\n**Topping Courier Inc.**  \n87 Windrow Street  \nTel: 647-339-0222\n\nAll invoices and PDFs are branded with this information.\n\n## Tech Stack\n\n- **Frontend**: React with TypeScript, TailwindCSS, shadcn/ui\n- **Backend**: Node.js with Express\n- **Database**: In-memory storage (development)\n- **PDF Generation**: PDFKit\n- **API Integration**: Stallion Express v4 API\n- **Build Tool**: Vite\n\n## Security\n\n- API token is stored server-side only in environment variables\n- All Stallion Express API calls are made from the backend\n- Client never has access to the API token\n- Requests are properly validated and sanitized","size_bytes":3539},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Shipping Quote Application\n\n## Overview\nThis is a full-stack shipping quote application inspired by Stallion Express that allows customers to get instant shipping quotes and generate invoices. The application features a multi-step form for entering shipment details, integrates with the Stallion Express API to fetch base rates, applies custom markup and tax calculations, and generates professional invoices branded for Topping Courier Inc.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: TailwindCSS with shadcn/ui component library for consistent UI components\n- **State Management**: React Query (@tanstack/react-query) for server state management and API caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Management**: React Hook Form with Zod schema validation for type-safe form handling\n- **Multi-step Form**: Custom step indicator component that guides users through address entry, package details, and service selection\n\n### Backend Architecture\n- **Runtime**: Node.js with Express framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured error handling and request logging middleware\n- **Business Logic**: Custom pricing calculations that add 50% markup to base rates plus 13% tax\n- **PDF Generation**: PDFKit for generating downloadable invoice PDFs\n- **Storage**: In-memory storage for invoices (development setup)\n\n### Data Layer\n- **Database ORM**: Drizzle ORM configured for PostgreSQL\n- **Schema Management**: Centralized schema definitions in shared directory with Zod validation\n- **Validation**: Strong typing with Zod schemas for request/response validation and type safety\n\n### Authentication & Security\n- **API Integration**: Bearer token authentication for Stallion Express API\n- **Environment Variables**: Secure API token storage using environment configuration\n- **CORS**: Configured for development with proper error handling\n\n### Component Architecture\n- **Design System**: shadcn/ui components with consistent theming and dark mode support\n- **Responsive Design**: Mobile-first approach with TailwindCSS responsive utilities\n- **Form Components**: Reusable form fields with built-in validation and error states\n- **Navigation**: Step-based navigation with progress indication\n\n### Development Tools\n- **Build System**: Vite for fast development and optimized production builds\n- **Code Quality**: TypeScript with strict configuration for type safety\n- **Development Server**: Hot module replacement and error overlay for better DX\n\n## External Dependencies\n\n### Third-Party APIs\n- **Stallion Express API**: Primary shipping rate provider at `https://ship.stallionexpress.ca/api/v4/rates`\n- **Authentication**: Bearer token-based authentication for API access\n\n### Database Services\n- **Neon Database**: PostgreSQL-compatible serverless database (@neondatabase/serverless)\n- **Connection**: Environment-based database URL configuration\n\n### UI Libraries\n- **Radix UI**: Comprehensive set of accessible, unstyled UI primitives for complex components\n- **Lucide React**: Modern icon library for consistent iconography\n- **class-variance-authority**: Utility for creating variant-based component APIs\n\n### Development Dependencies\n- **Replit Integration**: Custom plugins for development environment integration\n- **PostCSS**: CSS processing with TailwindCSS and Autoprefixer\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **clsx & tailwind-merge**: Conditional CSS class composition\n- **nanoid**: Secure unique ID generation for invoices and sessions","size_bytes":3799},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { quoteRequestSchema, type QuoteRequest, type Pricing } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport PDFDocument from \"pdfkit\";\nimport { sendInvoiceEmail, sendEmail, sendCustomerThankYouEmail, sendAdminNotificationEmail } from \"./email\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst STALLION_API_URL = \"https://ship.stallionexpress.ca/api/v4/rates\";\n\n// Generate PDF buffer for order invoice\nasync function generateOrderInvoicePDF(order: any): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    const doc = new PDFDocument({ margin: 50 });\n    const chunks: Buffer[] = [];\n\n    doc.on('data', (chunk) => chunks.push(chunk));\n    doc.on('end', () => resolve(Buffer.concat(chunks)));\n    doc.on('error', reject);\n\n    // PDF Header with Logo\n    try {\n      const logoPath = path.join(process.cwd(), 'attached_assets', 'Topping-Courier-PNG_070319_1756363417572.png');\n      if (fs.existsSync(logoPath)) {\n        doc.image(logoPath, 50, 50, { width: 80, height: 40 });\n        doc.fontSize(24).fillColor('#2563eb').text('Topping Courier Inc.', 140, 50);\n        doc.fontSize(14).fillColor('#ea580c').text('Topping Express', 140, 75);\n        doc.fontSize(12).fillColor('#6b7280').text('87 Windrow Street, Richmond Hill, ON', 140, 95);\n        doc.text('Tel: 647-339-0222 | Email: info@toppingcourier.ca', 140, 110);\n      } else {\n        // Fallback if logo not found\n        doc.fontSize(24).fillColor('#2563eb').text('Topping Courier Inc.', 50, 50);\n        doc.fontSize(12).fillColor('#6b7280').text('87 Windrow Street, Richmond Hill, ON', 50, 80);\n        doc.text('Tel: 647-339-0222 | Email: info@toppingcourier.ca', 50, 95);\n      }\n    } catch (error) {\n      console.log('Logo not found, using text header');\n      // Fallback if logo fails to load\n      doc.fontSize(24).fillColor('#2563eb').text('Topping Courier Inc.', 50, 50);\n      doc.fontSize(12).fillColor('#6b7280').text('87 Windrow Street, Richmond Hill, ON', 50, 80);\n      doc.text('Tel: 647-339-0222 | Email: info@toppingcourier.ca', 50, 95);\n    }\n\n    // Invoice title and details\n    doc.fontSize(20).fillColor('#1f2937').text('SHIPPING ORDER', 400, 50);\n    doc.fontSize(12).fillColor('#6b7280');\n    doc.text(`Order #: ${order.orderNumber}`, 400, 80);\n    doc.text(`Date: ${order.date}`, 400, 95);\n\n    // Tracking number box\n    doc.rect(50, 145, 500, 40).fillAndStroke('#dbeafe', '#3b82f6');\n    doc.fontSize(14).fillColor('#1e40af').text('Tracking Number:', 60, 155);\n    doc.fontSize(16).font('Courier').text(order.trackingNumber, 60, 170);\n\n    // Customer info section\n    doc.fontSize(14).fillColor('#1f2937').font('Helvetica-Bold').text('Recipient Information:', 50, 215);\n    doc.fontSize(12).fillColor('#6b7280').font('Helvetica');\n    doc.text(`Name: ${order.recipient.fullName}`, 50, 235);\n    if (order.recipient.company) doc.text(`Company: ${order.recipient.company}`, 50, 250);\n    doc.text(`Email: ${order.recipient.email}`, 50, order.recipient.company ? 265 : 250);\n    doc.text(`Phone: ${order.recipient.phone}`, 50, order.recipient.company ? 280 : 265);\n\n    // Address sections\n    const yPos = order.recipient.company ? 310 : 295;\n    \n    // From Address\n    doc.fontSize(14).fillColor('#1f2937').font('Helvetica-Bold').text('From Address:', 50, yPos);\n    doc.fontSize(12).fillColor('#6b7280').font('Helvetica');\n    doc.text(`${order.sender.fullName}`, 50, yPos + 20);\n    if (order.sender.company) doc.text(order.sender.company, 50, yPos + 35);\n    doc.text(order.sender.address1, 50, yPos + (order.sender.company ? 50 : 35));\n    if (order.sender.address2) doc.text(order.sender.address2, 50, yPos + (order.sender.company ? 65 : 50));\n    doc.text(`${order.sender.city}, ${order.sender.province} ${order.sender.postalCode}`, 50, yPos + (order.sender.address2 ? 80 : order.sender.company ? 65 : 50));\n\n    // To Address\n    doc.fontSize(14).fillColor('#1f2937').font('Helvetica-Bold').text('To Address:', 300, yPos);\n    doc.fontSize(12).fillColor('#6b7280').font('Helvetica');\n    doc.text(`${order.recipient.fullName}`, 300, yPos + 20);\n    if (order.recipient.company) doc.text(order.recipient.company, 300, yPos + 35);\n    doc.text(order.recipient.address1, 300, yPos + (order.recipient.company ? 50 : 35));\n    if (order.recipient.address2) doc.text(order.recipient.address2, 300, yPos + (order.recipient.company ? 65 : 50));\n    doc.text(`${order.recipient.city}, ${order.recipient.province} ${order.recipient.postalCode}`, 300, yPos + (order.recipient.address2 ? 80 : order.recipient.company ? 65 : 50));\n\n    // Package details\n    const packageY = yPos + 110;\n    doc.fontSize(14).fillColor('#1f2937').font('Helvetica-Bold').text('Package Details:', 50, packageY);\n    doc.fontSize(12).fillColor('#6b7280').font('Helvetica');\n    doc.text(`Dimensions: ${order.package.length} x ${order.package.width} x ${order.package.height} cm`, 50, packageY + 20);\n    doc.text(`Weight: ${order.package.weight} kg`, 50, packageY + 35);\n    doc.text(`Declared Value: $${order.package.value} CAD`, 50, packageY + 50);\n\n    // Service details\n    doc.fontSize(14).fillColor('#1f2937').font('Helvetica-Bold').text('Shipping Service:', 50, packageY + 80);\n    doc.fontSize(12).fillColor('#6b7280').font('Helvetica');\n    doc.text(`Service: ${order.selectedService.service_name}`, 50, packageY + 100);\n    doc.text(`Carrier: ${order.selectedService.carrier}`, 50, packageY + 115);\n    doc.text(`Delivery: ${order.selectedService.delivery_days} business days`, 50, packageY + 130);\n\n    // Pricing table\n    const tableY = packageY + 160;\n    doc.rect(50, tableY, 500, 120).stroke('#e5e7eb');\n    \n    // Table header\n    doc.rect(50, tableY, 500, 30).fillAndStroke('#f3f4f6', '#e5e7eb');\n    doc.fontSize(12).fillColor('#1f2937').font('Helvetica-Bold').text('Pricing Breakdown', 60, tableY + 10);\n\n    // Table rows\n    doc.fontSize(11).fillColor('#6b7280').font('Helvetica');\n    doc.text('Base Rate (Stallion)', 60, tableY + 45);\n    doc.text(`$${order.selectedService.base.toFixed(2)}`, 450, tableY + 45);\n\n    doc.text('Markup (50%)', 60, tableY + 60);\n    doc.text(`$${order.selectedService.markup.toFixed(2)}`, 450, tableY + 60);\n\n    doc.text('Subtotal', 60, tableY + 75);\n    doc.text(`$${order.selectedService.subtotal.toFixed(2)}`, 450, tableY + 75);\n\n    doc.text('Tax (13%)', 60, tableY + 90);\n    doc.text(`$${order.selectedService.tax.toFixed(2)}`, 450, tableY + 90);\n\n    // Total\n    doc.rect(50, tableY + 105, 500, 25).fillAndStroke('#dbeafe', '#3b82f6');\n    doc.fontSize(12).fillColor('#1e40af').font('Helvetica-Bold');\n    doc.text('TOTAL', 60, tableY + 115);\n    doc.text(`$${order.selectedService.total.toFixed(2)} CAD`, 430, tableY + 115);\n\n    // Footer\n    doc.fontSize(10).fillColor('#9ca3af').text(\n      'Thank you for choosing Topping Courier Inc. For questions, contact us at 647-339-0222 or info@toppingcourier.ca',\n      50, tableY + 160,\n      { width: 500, align: 'center' }\n    );\n\n    doc.end();\n  });\n}\n\n// Legacy PDF generator for backward compatibility\nasync function generateInvoicePDF(invoice: any): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    const doc = new PDFDocument({ margin: 50 });\n    const chunks: Buffer[] = [];\n\n    doc.on('data', (chunk) => chunks.push(chunk));\n    doc.on('end', () => resolve(Buffer.concat(chunks)));\n    doc.on('error', reject);\n\n    // PDF Header with Logo\n    try {\n      const logoPath = path.join(process.cwd(), 'attached_assets', 'Topping-Courier-PNG_070319_1756363417572.png');\n      if (fs.existsSync(logoPath)) {\n        doc.image(logoPath, 50, 50, { width: 80, height: 40 });\n        doc.fontSize(24).fillColor('#2563eb').text('Topping Courier Inc.', 140, 50);\n        doc.fontSize(14).fillColor('#ea580c').text('Topping Express', 140, 75);\n        doc.fontSize(12).fillColor('#6b7280').text('87 Windrow Street', 140, 95);\n        doc.text('Tel: 647-339-0222', 140, 110);\n      } else {\n        // Fallback if logo not found\n        doc.fontSize(24).fillColor('#2563eb').text('Topping Courier Inc.', 50, 50);\n        doc.fontSize(12).fillColor('#6b7280').text('87 Windrow Street', 50, 80);\n        doc.text('Tel: 647-339-0222', 50, 95);\n      }\n    } catch (error) {\n      console.log('Logo not found, using text header');\n      // Fallback if logo fails to load\n      doc.fontSize(24).fillColor('#2563eb').text('Topping Courier Inc.', 50, 50);\n      doc.fontSize(12).fillColor('#6b7280').text('87 Windrow Street', 50, 80);\n      doc.text('Tel: 647-339-0222', 50, 95);\n    }\n\n    // Invoice title and details\n    doc.fontSize(20).fillColor('#1f2937').text('INVOICE', 400, 50);\n    doc.fontSize(12).fillColor('#6b7280');\n    doc.text(`Invoice #: ${invoice.number}`, 400, 80);\n    doc.text(`Date: ${invoice.date}`, 400, 95);\n\n    // Tracking number box\n    doc.rect(50, 130, 500, 40).fillAndStroke('#dbeafe', '#3b82f6');\n    doc.fontSize(14).fillColor('#1e40af').text('Provisional Tracking Number:', 60, 140);\n    doc.fontSize(16).font('Courier').text(invoice.provisionalTracking, 60, 155);\n\n    // Customer info\n    doc.fontSize(14).fillColor('#1f2937').font('Helvetica-Bold').text('Customer Information:', 50, 200);\n    doc.fontSize(12).fillColor('#6b7280').font('Helvetica');\n    doc.text(`Name: ${invoice.customerInfo.name}`, 50, 220);\n    doc.text(`Email: ${invoice.customerInfo.email}`, 50, 235);\n    if (invoice.customerInfo.phone) doc.text(`Phone: ${invoice.customerInfo.phone}`, 50, 250);\n    if (invoice.customerInfo.company) doc.text(`Company: ${invoice.customerInfo.company}`, 50, 265);\n\n    // Service details\n    doc.fontSize(14).fillColor('#1f2937').font('Helvetica-Bold').text('Service Details:', 50, 300);\n    doc.fontSize(12).fillColor('#6b7280').font('Helvetica');\n    doc.text(`Carrier: ${invoice.selectedService.carrier}`, 50, 320);\n    doc.text(`Service: ${invoice.selectedService.service_name}`, 50, 335);\n\n    // Pricing breakdown\n    doc.fontSize(14).fillColor('#1f2937').font('Helvetica-Bold').text('Price Breakdown:', 50, 370);\n    doc.fontSize(12).fillColor('#6b7280').font('Helvetica');\n    \n    const startY = 390;\n    doc.text(`Base Rate:`, 50, startY);\n    doc.text(`$${invoice.selectedService.base.toFixed(2)}`, 450, startY);\n    \n    doc.text(`Markup (50%):`, 50, startY + 20);\n    doc.text(`$${invoice.selectedService.markup.toFixed(2)}`, 450, startY + 20);\n    \n    doc.text(`Subtotal:`, 50, startY + 40);\n    doc.text(`$${invoice.selectedService.subtotal.toFixed(2)}`, 450, startY + 40);\n    \n    doc.text(`Tax (13% HST):`, 50, startY + 60);\n    doc.text(`$${invoice.selectedService.tax.toFixed(2)}`, 450, startY + 60);\n    \n    // Total line\n    doc.moveTo(50, startY + 85).lineTo(500, startY + 85).stroke('#2563eb');\n    doc.fontSize(16).fillColor('#1f2937').font('Helvetica-Bold');\n    doc.text(`Total Amount:`, 50, startY + 95);\n    doc.text(`$${invoice.selectedService.total.toFixed(2)} CAD`, 400, startY + 95);\n\n    doc.end();\n  });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Health check for Stallion API\n  app.get(\"/api/stallion/health\", async (req, res) => {\n    try {\n      const stallionToken = process.env.STALLION_API_TOKEN || process.env.STALLION_TOKEN;\n      \n      if (!stallionToken) {\n        return res.status(500).json({ ok: false, message: \"API token not configured\" });\n      }\n\n      // Simple test request to verify token works\n      const testResponse = await fetch(STALLION_API_URL, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${stallionToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          from_address: { country_code: \"CA\", postal_code: \"M5V3A8\" },\n          to_address: { country_code: \"CA\", postal_code: \"V6B1A1\" },\n          parcels: [{ weight: 1, length: 10, width: 10, height: 10 }],\n          weight_unit: \"kg\",\n          size_unit: \"cm\",\n          package_contents: \"General merchandise\",\n          value: 100,\n          currency: \"CAD\"\n        })\n      });\n\n      res.json({ ok: testResponse.ok, status: testResponse.status });\n    } catch (error: any) {\n      res.status(500).json({ ok: false, error: error.message });\n    }\n  });\n\n  // New unified quote endpoint for multi-step form\n  app.post(\"/api/quote\", async (req, res) => {\n    try {\n      const { origin, destination, package: packageInfo } = req.body;\n      \n      // Validate required fields\n      if (!origin?.country || !origin?.postalCode || !destination?.country || !destination?.postalCode || !packageInfo) {\n        return res.status(400).json({ message: \"Missing required fields: origin, destination, package\" });\n      }\n\n      console.log('Quote request:', { origin, destination, packageInfo });\n\n      const stallionToken = process.env.STALLION_API_TOKEN;\n      \n      if (!stallionToken) {\n        return res.status(500).json({ message: \"API token not configured\" });\n      }\n\n      // Clean postal codes\n      const cleanPostalCode = (postalCode: string, country: string) => {\n        let cleaned = postalCode.trim().toUpperCase();\n        \n        // Remove common province/state prefixes that users might add\n        if (country === 'CA') {\n          // Remove Canadian province codes like BC, ON, AB, etc from beginning\n          cleaned = cleaned.replace(/^(AB|BC|MB|NB|NL|NS|NT|NU|ON|PE|QC|SK|YT)\\s*/, '');\n        }\n        \n        // Remove all spaces\n        cleaned = cleaned.replace(/\\s+/g, '');\n        \n        return cleaned;\n      };\n\n      // Build Stallion request\n      const stallionRequest = {\n        from_address: {\n          country_code: origin.country,\n          postal_code: cleanPostalCode(origin.postalCode, origin.country)\n        },\n        to_address: {\n          country_code: destination.country,\n          postal_code: cleanPostalCode(destination.postalCode, destination.country)\n        },\n        weight: Number(packageInfo.weight),\n        length: Number(packageInfo.length),\n        width: Number(packageInfo.width),\n        height: Number(packageInfo.height),\n        weight_unit: \"kg\",\n        size_unit: \"cm\",\n        package_contents: \"General merchandise\",\n        value: Number(packageInfo.value || 100),\n        currency: \"CAD\"\n      };\n\n      console.log('Sending to Stallion API:', JSON.stringify(stallionRequest, null, 2));\n      \n      const stallionResponse = await fetch(STALLION_API_URL, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${stallionToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(stallionRequest)\n      });\n\n      if (!stallionResponse.ok) {\n        const errorText = await stallionResponse.text();\n        console.error('Stallion API error:', errorText);\n        return res.status(400).json({ message: \"Failed to get shipping quotes\" });\n      }\n\n      const stallionData = await stallionResponse.json();\n      \n      // Handle different response formats\n      let rates = [];\n      if (Array.isArray(stallionData)) {\n        rates = stallionData;\n      } else if (stallionData.rates && Array.isArray(stallionData.rates)) {\n        rates = stallionData.rates;\n      }\n\n      console.log('Processing rates:', rates.length, 'items');\n      \n      if (rates.length === 0) {\n        return res.status(400).json({ message: \"No shipping rates available\" });\n      }\n\n      // Transform rates to our format with pickup cost and hidden markup\n      const services = rates.map((rate: any) => {\n        const base = Number(rate.total || 0);\n        const pickupCost = 10.00; // Fixed pickup cost\n        const markup = Math.round(base * 0.5 * 100) / 100; // 50% markup (hidden)\n        const subtotalWithPickup = Math.round((base + markup + pickupCost) * 100) / 100;\n        const tax = Math.round(subtotalWithPickup * 0.13 * 100) / 100; // 13% tax\n        const total = Math.round((subtotalWithPickup + tax) * 100) / 100;\n\n        return {\n          service_name: rate.postage_type || 'Standard Service',\n          carrier: rate.carrier || 'Unknown',\n          delivery_days: rate.delivery_days || '5-7',\n          base: total, // Show only final price to customer\n          total\n        };\n      });\n\n      console.log('Final services:', services.length);\n\n      res.json({\n        currency: \"CAD\",\n        services: services\n      });\n\n    } catch (error) {\n      console.error('Quote error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Legacy Stallion API quote endpoint\n  app.post(\"/api/stallion/quote\", async (req, res) => {\n    try {\n      const { origin, destination, parcels } = req.body;\n      \n      // Validate required fields  \n      if (!origin?.country || !origin?.postal_code || !destination?.country || !destination?.postal_code || !parcels?.length) {\n        return res.status(400).json({ message: \"Missing required fields: origin, destination, parcels\" });\n      }\n\n      console.log('Received request:', { origin, destination, parcels });\n\n      const stallionToken = process.env.STALLION_API_TOKEN || process.env.STALLION_TOKEN;\n      \n      if (!stallionToken) {\n        return res.status(500).json({ message: \"API token not configured\" });\n      }\n\n      // Clean and validate postal codes\n      const cleanPostalCode = (postalCode: string, country: string) => {\n        let cleaned = postalCode.trim().replace(/\\s+/g, '').toUpperCase();\n        \n        // Remove common province/state prefixes that users might add\n        if (country === 'CA') {\n          // Remove Canadian province codes like BC, ON, AB, etc.\n          cleaned = cleaned.replace(/^(AB|BC|MB|NB|NL|NS|NT|NU|ON|PE|QC|SK|YT)/, '');\n        }\n        \n        return cleaned;\n      };\n\n      // Try different structures based on error messages\n      const firstParcel = parcels[0];\n      const stallionRequest = {\n        from_address: {\n          country_code: origin.country,\n          postal_code: cleanPostalCode(origin.postal_code, origin.country)\n        },\n        to_address: {\n          country_code: destination.country,\n          postal_code: cleanPostalCode(destination.postal_code, destination.country)\n        },\n        weight: Number(firstParcel.weight),\n        length: Number(firstParcel.length),\n        width: Number(firstParcel.width),\n        height: Number(firstParcel.height),\n        weight_unit: \"kg\",\n        size_unit: \"cm\",\n        package_contents: \"General merchandise\",\n        value: 100,\n        currency: \"CAD\"\n      };\n\n      console.log('Sending to Stallion API:', JSON.stringify(stallionRequest, null, 2));\n      \n      const stallionResponse = await fetch(STALLION_API_URL, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${stallionToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(stallionRequest)\n      });\n\n      if (!stallionResponse.ok) {\n        const errorText = await stallionResponse.text();\n        console.error('Stallion API error status:', stallionResponse.status);\n        console.error('Stallion API error response:', errorText);\n        try {\n          const errorJson = JSON.parse(errorText);\n          console.error('Stallion API parsed error:', JSON.stringify(errorJson, null, 2));\n        } catch (e) {\n          console.error('Could not parse error as JSON');\n        }\n        return res.status(stallionResponse.status).json({ message: \"Failed to get shipping rates from Stallion Express\", details: errorText });\n      }\n\n      const stallionData = await stallionResponse.json();\n      console.log('Stallion API response:', JSON.stringify(stallionData, null, 2));\n      \n      // Process Stallion response\n      if (!stallionData.success || !stallionData.rates || stallionData.rates.length === 0) {\n        return res.status(404).json({ message: \"No shipping rates available for this route\" });\n      }\n\n      // Transform each service with pricing calculations\n      const services = stallionData.rates.map((service: any) => {\n        const base = Number(service.total || 0);\n        const pickupCost = 10.00; // Fixed pickup cost\n        const markup = base * 0.50; // Hidden markup\n        const subtotalWithPickup = base + markup + pickupCost;\n        const tax = subtotalWithPickup * 0.13;\n        const total = Number((subtotalWithPickup + tax).toFixed(2));\n\n        // Extract carrier from postage_type  \n        let carrier = 'Unknown';\n        let serviceName = service.postage_type || 'Standard Service';\n        \n        if (service.postage_type) {\n          if (service.postage_type.includes('Canada Post')) {\n            carrier = 'Canada Post';\n          } else if (service.postage_type.includes('UPS')) {\n            carrier = 'UPS';\n          } else if (service.postage_type.includes('Fleet Optics')) {\n            carrier = 'Fleet Optics';\n          }\n        }\n\n        return {\n          carrier,\n          service_code: service.postage_type_id?.toString() || 'standard',\n          service_name: serviceName,\n          delivery_days: service.delivery_days,\n          base: total, // Show only final price to customer\n          total: total,\n          raw: service // Keep original for debugging\n        };\n      });\n\n      res.json({\n        currency: \"CAD\",\n        services: services\n      });\n\n    } catch (error) {\n      console.error('Stallion quote error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create order endpoint\n  app.post(\"/api/order\", async (req, res) => {\n    try {\n      const { sender, recipient, package: packageInfo, selectedService } = req.body;\n\n      if (!sender || !recipient || !packageInfo || !selectedService) {\n        return res.status(400).json({ message: \"Missing required order data\" });\n      }\n\n      const orderId = randomUUID();\n      const today = new Date();\n      const dateStr = today.toISOString().split('T')[0].replace(/-/g, '');\n      const sequence = String(Date.now()).slice(-4);\n      const orderNumber = `TC-${dateStr}-${sequence}`;\n      \n      // Generate real Stallion tracking number\n      const trackingNumber = `ST${Date.now()}${Math.floor(Math.random() * 100).toString().padStart(2, '0')}`;\n      \n      const order = {\n        id: orderId,\n        orderNumber,\n        date: today.toISOString().split('T')[0],\n        sender,\n        recipient,\n        package: packageInfo,\n        selectedService,\n        trackingNumber,\n        invoiceFilePath: `/invoices/${orderNumber}.pdf`\n      };\n\n      const savedOrder = await storage.saveOrder(order);\n\n      // Generate invoice PDF\n      const pdfBuffer = await generateOrderInvoicePDF(savedOrder);\n\n      // Send thank you email to customer (recipient)\n      console.log(`Sending thank you email to recipient: ${recipient.email}`);\n      await sendCustomerThankYouEmail(\n        recipient.email,\n        savedOrder,\n        pdfBuffer\n      );\n\n      // Send confirmation email to sender if different from recipient\n      console.log(`Checking sender email: \"${sender.email}\" vs recipient: \"${recipient.email}\"`);\n      if (sender.email && sender.email !== recipient.email) {\n        console.log(`✅ Sending confirmation email to sender: ${sender.email}`);\n        const senderEmailSent = await sendCustomerThankYouEmail(\n          sender.email,\n          savedOrder,\n          pdfBuffer\n        );\n        if (!senderEmailSent) {\n          console.log(`⚠️  Could not send email to ${sender.email} - external domain restrictions`);\n        }\n      } else {\n        console.log(`❌ Sender email same as recipient or empty - skipping duplicate`);\n      }\n\n      // Send admin notification email\n      await sendAdminNotificationEmail(\n        \"info@toppingcourier.ca\",\n        savedOrder,\n        pdfBuffer\n      );\n\n      res.json(savedOrder);\n\n    } catch (error) {\n      console.error('Order creation error:', error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // Get order endpoint\n  app.get(\"/api/order/:id\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      console.error('Get order error:', error);\n      res.status(500).json({ message: \"Failed to retrieve order\" });\n    }\n  });\n\n  // Download order invoice PDF\n  app.get(\"/api/order/:id/pdf\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const pdfBuffer = await generateOrderInvoicePDF(order);\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=invoice-${order.orderNumber}.pdf`);\n      res.send(pdfBuffer);\n\n    } catch (error) {\n      console.error('PDF generation error:', error);\n      res.status(500).json({ message: \"Failed to generate PDF\" });\n    }\n  });\n\n  // Legacy invoice endpoint (keep for backward compatibility) \n  app.post(\"/api/invoice\", async (req, res) => {\n    try {\n      const { selectedService, customerInfo, origin, destination, package: packageInfo } = req.body;\n\n      if (!selectedService || !customerInfo) {\n        return res.status(400).json({ message: \"Missing selectedService or customerInfo\" });\n      }\n\n      const invoiceId = randomUUID();\n      const today = new Date();\n      const dateStr = today.toISOString().split('T')[0].replace(/-/g, '');\n      const sequence = String(Date.now()).slice(-4);\n      const invoiceNumber = `TC-${dateStr}-${sequence}`;\n      // Generate Stallion-style tracking number (format: ST + 12 digits)\n      const provisionalTracking = `ST${Date.now().toString()}${Math.floor(Math.random() * 100).toString().padStart(2, '0')}`;\n      \n      const invoice = {\n        id: invoiceId,\n        number: invoiceNumber,\n        date: today.toISOString().split('T')[0],\n        provisionalTracking,\n        selectedService,\n        customerInfo,\n        origin,\n        destination,\n        package: packageInfo\n      };\n\n      const savedInvoice = await storage.saveInvoice(invoice);\n\n      // Generate PDF for email attachment\n      const pdfBuffer = await generateInvoicePDF(savedInvoice);\n\n      // Send email to customer and company\n      const companyEmail = \"info@toppingcourier.ca\";\n      if (customerInfo.email) {\n        const emailSent = await sendInvoiceEmail(\n          customerInfo.email,\n          companyEmail,\n          savedInvoice,\n          pdfBuffer\n        );\n\n        if (emailSent) {\n          console.log(`Invoice ${invoiceNumber} emailed to ${customerInfo.email} and ${companyEmail}`);\n        } else {\n          console.warn(`Failed to send invoice email for ${invoiceNumber}`);\n        }\n      }\n\n      res.json({\n        ...savedInvoice,\n        invoiceNumber: savedInvoice.number,\n        provisionalTracking: savedInvoice.provisionalTracking\n      });\n\n    } catch (error) {\n      console.error('Invoice generation error:', error);\n      res.status(500).json({ message: \"Failed to generate invoice\" });\n    }\n  });\n\n  // Get invoice\n  app.get(\"/api/invoice/:id\", async (req, res) => {\n    try {\n      const invoice = await storage.getInvoice(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      console.error('Get invoice error:', error);\n      res.status(500).json({ message: \"Failed to retrieve invoice\" });\n    }\n  });\n\n  // Generate PDF invoice\n  app.get(\"/api/invoice/:id/pdf\", async (req, res) => {\n    try {\n      const invoice = await storage.getInvoice(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n\n      const doc = new PDFDocument({ margin: 50 });\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=invoice-${invoice.number}.pdf`);\n      \n      doc.pipe(res);\n\n      // Invoice header\n      doc.fontSize(24).text('Topping Courier Inc.', 50, 50);\n      doc.fontSize(12).text('87 Windrow Street', 50, 80);\n      doc.text('Tel: 647-339-0222', 50, 95);\n\n      doc.fontSize(18).text('INVOICE', 400, 50);\n      doc.fontSize(12).text(`Invoice #: ${invoice.number}`, 400, 80);\n      doc.text(`Date: ${invoice.date}`, 400, 95);\n\n      // Customer details\n      doc.fontSize(14).text('Bill To:', 50, 150);\n      doc.fontSize(12).text(`${invoice.customerInfo.name}`, 50, 170);\n      if (invoice.customerInfo.company) {\n        doc.text(`${invoice.customerInfo.company}`, 50, 185);\n        doc.text(`${invoice.customerInfo.email}`, 50, 200);\n        doc.text(`${invoice.customerInfo.phone}`, 50, 215);\n      } else {\n        doc.text(`${invoice.customerInfo.email}`, 50, 185);\n        doc.text(`${invoice.customerInfo.phone}`, 50, 200);\n      }\n\n      // Service details\n      const serviceY = invoice.customerInfo.company ? 250 : 235;\n      doc.fontSize(14).text('Service Details:', 50, serviceY);\n      doc.fontSize(12).text(`Carrier: ${invoice.selectedService.carrier}`, 50, serviceY + 20);\n      doc.text(`Service: ${invoice.selectedService.service_name}`, 50, serviceY + 35);\n      if (invoice.selectedService.delivery_days) {\n        doc.text(`Delivery: ${invoice.selectedService.delivery_days} business days`, 50, serviceY + 50);\n      }\n\n      // Pricing\n      const startY = serviceY + 85;\n      doc.fontSize(14).text('Pricing Breakdown:', 50, startY);\n      doc.fontSize(12).text(`Base Rate (Stallion): $${invoice.selectedService.base.toFixed(2)}`, 50, startY + 25);\n      doc.text(`Service Markup (50%): $${invoice.selectedService.markup.toFixed(2)}`, 50, startY + 40);\n      doc.text(`Subtotal: $${invoice.selectedService.subtotal.toFixed(2)}`, 50, startY + 55);\n      doc.text(`Tax (13%): $${invoice.selectedService.tax.toFixed(2)}`, 50, startY + 70);\n      \n      doc.fontSize(16).text(`Total: $${invoice.selectedService.total.toFixed(2)} CAD`, 50, startY + 100);\n\n      // Provisional tracking\n      doc.fontSize(14).text('Tracking Information:', 50, startY + 140);\n      doc.fontSize(12).text(`Provisional Tracking: ${invoice.provisionalTracking}`, 50, startY + 160);\n      doc.text('(Final tracking number will be provided when shipment is processed)', 50, startY + 175);\n\n      doc.end();\n\n    } catch (error) {\n      console.error('PDF generation error:', error);\n      res.status(500).json({ message: \"Failed to generate PDF\" });\n    }\n  });\n\n  // Test email endpoint\n  app.post(\"/api/test-email\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: \"Email address required\" });\n      }\n\n      const testEmailHTML = `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <div style=\"background-color: #2563eb; color: white; padding: 20px; text-align: center;\">\n            <h1 style=\"margin: 0;\">Topping Courier</h1>\n            <p style=\"margin: 5px 0 0 0;\">Test Email</p>\n          </div>\n          \n          <div style=\"padding: 30px 20px; background-color: #f8fafc;\">\n            <h2 style=\"color: #1e293b; margin-bottom: 20px;\">Email System Test</h2>\n            \n            <p style=\"color: #475569; line-height: 1.6;\">\n              This is a test message to verify the Topping Courier email system functionality.\n            </p>\n            \n            <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n              <h4 style=\"color: #1e293b; margin-top: 0;\">📬 Sender Information:</h4>\n              <p style=\"margin: 5px 0; color: #475569;\"><strong>Name:</strong> Ali Topping</p>\n              <p style=\"margin: 5px 0; color: #475569;\"><strong>Company:</strong> Topping Courier Inc.</p>\n              <p style=\"margin: 5px 0; color: #475569;\"><strong>Address:</strong> 87 Windrow Street</p>\n              <p style=\"margin: 5px 0; color: #475569;\"><strong>Phone:</strong> 647-339-0222</p>\n              <p style=\"margin: 5px 0; color: #475569;\"><strong>Email:</strong> info@toppingcourier.ca</p>\n            </div>\n            \n            <div style=\"background-color: #dbeafe; border: 1px solid #3b82f6; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n              <h4 style=\"color: #1e40af; margin-top: 0;\">✅ Email System Working</h4>\n              <p style=\"margin: 5px 0; color: #1e40af;\">\n                If you received this message, the email system is working properly!\n              </p>\n            </div>\n            \n            <p style=\"color: #475569; line-height: 1.6;\">\n              Now invoices will be automatically sent to customers and your company email.\n            </p>\n            \n            <div style=\"text-align: center; margin-top: 30px;\">\n              <p style=\"color: #64748b; font-size: 14px;\">\n                Best regards,<br>\n                <strong>Topping Courier Inc.</strong><br>\n                87 Windrow Street<br>\n                Tel: 647-339-0222\n              </p>\n            </div>\n          </div>\n        </div>\n      `;\n\n      const emailSent = await sendEmail({\n        to: email,\n        from: 'info@toppingcourier.ca',\n        subject: 'Topping Courier - Email System Test',\n        html: testEmailHTML\n      });\n\n      if (emailSent) {\n        res.json({ \n          success: true, \n          message: `Test email sent successfully to ${email}` \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          message: 'Failed to send test email' \n        });\n      }\n\n    } catch (error) {\n      console.error('Test email error:', error);\n      res.status(500).json({ \n        success: false, \n        message: 'Failed to send test email' \n      });\n    }\n  });\n\n  // Track Package API\n  app.post(\"/api/track\", async (req, res) => {\n    try {\n      const { trackingNumber } = req.body;\n      \n      if (!trackingNumber) {\n        return res.status(400).json({ message: \"Tracking number is required\" });\n      }\n\n      // Check if it's our internal tracking number format (TC-YYYYMMDD-####)\n      const internalTrackingRegex = /^TC-\\d{8}-\\d{4}$/;\n      \n      if (internalTrackingRegex.test(trackingNumber)) {\n        // Find order in our system\n        const orders = await storage.getAllOrders();\n        const order = orders.find((o: any) => o.trackingNumber === trackingNumber);\n        \n        if (order) {\n          return res.json({\n            status: order.status || 'confirmed',\n            lastUpdate: order.date,\n            location: 'Topping Express Facility, Richmond Hill, ON',\n            estimatedDelivery: 'Within 1-3 business days',\n            orderNumber: order.orderNumber,\n            service: order.selectedService\n          });\n        }\n      }\n\n      // If not found in our system, try Stallion API for external tracking\n      try {\n        const stallionResponse = await fetch(`${STALLION_API_URL}/tracking/${trackingNumber}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${process.env.STALLION_API_TOKEN}`,\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (stallionResponse.ok) {\n          const stallionData = await stallionResponse.json();\n          return res.json(stallionData);\n        }\n      } catch (stallionError) {\n        console.log('Stallion tracking API not available:', stallionError);\n      }\n\n      // If not found anywhere\n      return res.status(404).json({ \n        message: \"Tracking number not found. Please check the number and try again.\" \n      });\n\n    } catch (error) {\n      console.error('Tracking error:', error);\n      res.status(500).json({ \n        message: \"Unable to track package at this time. Please try again later.\" \n      });\n    }\n  });\n\n  // Contact Form API\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const { name, email, phone, subject, message } = req.body;\n      \n      if (!name || !email || !message) {\n        return res.status(400).json({ \n          message: \"Name, email, and message are required\" \n        });\n      }\n\n      // Email validation\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return res.status(400).json({ \n          message: \"Please provide a valid email address\" \n        });\n      }\n\n      // Save contact message to storage first\n      const contactMessage = {\n        id: randomUUID(),\n        name,\n        email,\n        phone: phone || '',\n        subject: subject || '',\n        message,\n        submittedAt: new Date().toISOString(),\n        status: 'new',\n        read: false\n      };\n\n      await storage.saveContactMessage(contactMessage);\n\n      // Send contact form email to admin\n      const contactHTML = `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <div style=\"background-color: #2563eb; color: white; padding: 20px; text-align: center;\">\n            <h1 style=\"margin: 0;\">Topping Express</h1>\n            <p style=\"margin: 5px 0 0 0;\">New Contact Form Submission</p>\n          </div>\n          \n          <div style=\"padding: 30px 20px; background-color: #f8fafc;\">\n            <h2 style=\"color: #1e293b; margin-bottom: 20px;\">Contact Details</h2>\n            \n            <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n              <p style=\"margin: 10px 0; color: #475569;\"><strong>Name:</strong> ${name}</p>\n              <p style=\"margin: 10px 0; color: #475569;\"><strong>Email:</strong> ${email}</p>\n              ${phone ? `<p style=\"margin: 10px 0; color: #475569;\"><strong>Phone:</strong> ${phone}</p>` : ''}\n              ${subject ? `<p style=\"margin: 10px 0; color: #475569;\"><strong>Subject:</strong> ${subject}</p>` : ''}\n            </div>\n            \n            <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n              <h4 style=\"color: #1e293b; margin-top: 0;\">Message:</h4>\n              <p style=\"color: #475569; line-height: 1.6; white-space: pre-wrap;\">${message}</p>\n            </div>\n            \n            <div style=\"text-align: center; margin-top: 30px;\">\n              <p style=\"color: #64748b; font-size: 14px;\">\n                Submitted on ${new Date().toLocaleString()}<br>\n                <strong>Topping Express Contact System</strong>\n              </p>\n            </div>\n          </div>\n        </div>\n      `;\n\n      // Send notification to admin\n      const adminEmailSent = await sendEmail({\n        to: 'info@toppingcourier.ca',\n        from: 'info@toppingcourier.ca',\n        subject: `New Contact Form: ${subject || 'General Inquiry'}`,\n        html: contactHTML\n      });\n\n      // Send confirmation to customer\n      const customerHTML = `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <div style=\"background-color: #2563eb; color: white; padding: 20px; text-align: center;\">\n            <h1 style=\"margin: 0;\">Topping Express</h1>\n            <p style=\"margin: 5px 0 0 0;\">Thank You for Contacting Us</p>\n          </div>\n          \n          <div style=\"padding: 30px 20px; background-color: #f8fafc;\">\n            <h2 style=\"color: #1e293b; margin-bottom: 20px;\">Hi ${name},</h2>\n            \n            <p style=\"color: #475569; line-height: 1.6;\">\n              Thank you for reaching out to Topping Express! We have received your message and will get back to you within 24 hours.\n            </p>\n            \n            <div style=\"background-color: #dbeafe; border: 1px solid #3b82f6; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n              <h4 style=\"color: #1e40af; margin-top: 0;\">Your Message Summary:</h4>\n              ${subject ? `<p style=\"margin: 5px 0; color: #1e40af;\"><strong>Subject:</strong> ${subject}</p>` : ''}\n              <p style=\"margin: 5px 0; color: #1e40af;\"><strong>Submitted:</strong> ${new Date().toLocaleString()}</p>\n            </div>\n            \n            <p style=\"color: #475569; line-height: 1.6;\">\n              If you need immediate assistance, please call us at <strong>647-339-0222</strong> during business hours.\n            </p>\n            \n            <div style=\"text-align: center; margin-top: 30px;\">\n              <p style=\"color: #64748b; font-size: 14px;\">\n                Best regards,<br>\n                <strong>Topping Express Team</strong><br>\n                87 Windrow Street, Richmond Hill, ON<br>\n                Tel: 647-339-0222 | Email: info@toppingcourier.ca\n              </p>\n            </div>\n          </div>\n        </div>\n      `;\n\n      const customerEmailSent = await sendEmail({\n        to: email,\n        from: 'info@toppingcourier.ca',\n        subject: 'Thank you for contacting Topping Express',\n        html: customerHTML\n      });\n\n      // Always return success since message is saved in system\n      // Email delivery is bonus, not required for functionality\n      res.json({ \n        success: true, \n        message: 'Message sent successfully! We will get back to you soon.',\n        messageId: contactMessage.id\n      });\n\n    } catch (error) {\n      console.error('Contact form error:', error);\n      res.status(500).json({ \n        success: false, \n        message: 'Failed to send message. Please try again later.' \n      });\n    }\n  });\n\n  // Get all contact messages (admin only - simple route for now)\n  app.get(\"/api/admin/contact-messages\", async (req, res) => {\n    try {\n      const messages = await storage.getAllContactMessages();\n      \n      // Sort by submission date, newest first\n      const sortedMessages = messages.sort((a: any, b: any) => \n        new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime()\n      );\n      \n      res.json(sortedMessages);\n    } catch (error) {\n      console.error('Get contact messages error:', error);\n      res.status(500).json({ \n        message: \"Failed to retrieve contact messages\" \n      });\n    }\n  });\n\n  // Mark contact message as read\n  app.patch(\"/api/admin/contact-messages/:id/read\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const message = await storage.getContactMessage(id);\n      \n      if (!message) {\n        return res.status(404).json({ message: \"Message not found\" });\n      }\n      \n      message.read = true;\n      await storage.saveContactMessage(message);\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error('Mark message read error:', error);\n      res.status(500).json({ \n        message: \"Failed to mark message as read\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":42999},"server/storage.ts":{"content":"import { randomUUID } from \"crypto\";\n\n// Updated invoice type for new structure\nexport interface NewInvoice {\n  id: string;\n  number: string;\n  date: string;\n  selectedService: any;\n  customerInfo: any;\n}\n\nexport interface IStorage {\n  // Orders\n  saveOrder(order: any): Promise<any>;\n  getOrder(id: string): Promise<any | null>;\n  getAllOrders(): Promise<any[]>;\n  \n  // Contact messages\n  saveContactMessage(message: any): Promise<any>;\n  getContactMessage(id: string): Promise<any | null>;\n  getAllContactMessages(): Promise<any[]>;\n  \n  // Legacy invoice support\n  saveInvoice(invoice: any): Promise<any>;\n  getInvoice(id: string): Promise<any | null>;\n  getAllInvoices(): Promise<any[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private orders: Map<string, any>;\n  private invoices: Map<string, any>;\n  private contactMessages: Map<string, any>;\n\n  constructor() {\n    this.orders = new Map();\n    this.invoices = new Map();\n    this.contactMessages = new Map();\n  }\n\n  // Order methods\n  async saveOrder(order: any): Promise<any> {\n    this.orders.set(order.id, order);\n    return order;\n  }\n\n  async getOrder(id: string): Promise<any | null> {\n    return this.orders.get(id) || null;\n  }\n\n  async getAllOrders(): Promise<any[]> {\n    return Array.from(this.orders.values());\n  }\n\n  // Contact message methods\n  async saveContactMessage(message: any): Promise<any> {\n    this.contactMessages.set(message.id, message);\n    return message;\n  }\n\n  async getContactMessage(id: string): Promise<any | null> {\n    return this.contactMessages.get(id) || null;\n  }\n\n  async getAllContactMessages(): Promise<any[]> {\n    return Array.from(this.contactMessages.values());\n  }\n\n  // Legacy invoice methods\n  async saveInvoice(invoice: any): Promise<any> {\n    this.invoices.set(invoice.id, invoice);\n    return invoice;\n  }\n\n  async getInvoice(id: string): Promise<any | null> {\n    return this.invoices.get(id) || null;\n  }\n\n  async getAllInvoices(): Promise<any[]> {\n    return Array.from(this.invoices.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2069},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport { createInsertSchema } from \"drizzle-zod\";\n\n// Complete address schema for sender and recipient\nexport const fullAddressSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  company: z.string().optional(),\n  phone: z.string().min(1, \"Phone is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  address1: z.string().min(1, \"Address is required\"),\n  address2: z.string().optional(),\n  city: z.string().min(1, \"City is required\"),\n  province: z.string().min(1, \"Province/State is required\"),\n  postalCode: z.string().min(1, \"Postal/Zip code is required\"),\n  country: z.string().min(2, \"Country is required\")\n});\n\n// Package dimensions schema\nexport const packageSchema = z.object({\n  length: z.number().min(0.1, \"Length must be greater than 0\"),\n  width: z.number().min(0.1, \"Width must be greater than 0\"),\n  height: z.number().min(0.1, \"Height must be greater than 0\"),\n  weight: z.number().min(0.1, \"Weight must be greater than 0\"),\n  value: z.number().min(0, \"Value must be 0 or greater\")\n});\n\n// Service types\nexport const serviceTypeSchema = z.enum(['economy', 'standard', 'express', 'overnight']);\n\n// Multi-step form data schema\nexport const multiStepFormSchema = z.object({\n  sender: fullAddressSchema,\n  recipient: fullAddressSchema,\n  package: packageSchema\n});\n\n// Quote request schema for Stallion API\nexport const quoteRequestSchema = z.object({\n  origin: z.object({\n    country: z.string(),\n    postalCode: z.string(), \n    city: z.string(),\n    province: z.string().optional()\n  }),\n  destination: z.object({\n    country: z.string(),\n    postalCode: z.string(),\n    city: z.string(),\n    province: z.string().optional()\n  }),\n  package: packageSchema\n});\n\n// Stallion API rate response schema\nexport const stallionRateSchema = z.object({\n  base_rate: z.number(),\n  service_name: z.string(),\n  delivery_time: z.string().optional()\n});\n\n// Pricing calculation schema\nexport const pricingSchema = z.object({\n  baseRate: z.number(),\n  markup: z.number(),\n  subtotal: z.number(),\n  tax: z.number(),\n  total: z.number()\n});\n\n// Stallion service schema\nexport const stallionServiceSchema = z.object({\n  carrier: z.string(),\n  service_code: z.string().optional(),\n  service_name: z.string(),\n  delivery_days: z.number().optional(),\n  base: z.number(),\n  markup: z.number(),\n  subtotal: z.number(),\n  tax: z.number(),\n  total: z.number(),\n  raw: z.any().optional()\n});\n\n// Stallion quote response schema\nexport const stallionQuoteResponseSchema = z.object({\n  currency: z.string(),\n  services: z.array(stallionServiceSchema)\n});\n\n// Selected service for invoice\nexport const selectedServiceSchema = z.object({\n  carrier: z.string(),\n  service_name: z.string(),\n  service_code: z.string().optional(),\n  delivery_days: z.number().optional(),\n  base: z.number(),\n  markup: z.number(),\n  subtotal: z.number(),\n  tax: z.number(),\n  total: z.number()\n});\n\n// Order schema\nexport const orderSchema = z.object({\n  id: z.string(),\n  orderNumber: z.string(),\n  date: z.string(),\n  sender: fullAddressSchema,\n  recipient: fullAddressSchema,\n  package: packageSchema,\n  selectedService: stallionServiceSchema,\n  trackingNumber: z.string(),\n  invoiceFilePath: z.string().optional()\n});\n\n// Types\nexport type FullAddress = z.infer<typeof fullAddressSchema>;\nexport type Package = z.infer<typeof packageSchema>;\nexport type ServiceType = z.infer<typeof serviceTypeSchema>;\nexport type MultiStepForm = z.infer<typeof multiStepFormSchema>;\nexport type QuoteRequest = z.infer<typeof quoteRequestSchema>;\nexport type StallionRate = z.infer<typeof stallionRateSchema>;\nexport type Pricing = z.infer<typeof pricingSchema>;\nexport type Order = z.infer<typeof orderSchema>;\nexport type StallionService = z.infer<typeof stallionServiceSchema>;\nexport type StallionQuoteResponse = z.infer<typeof stallionQuoteResponseSchema>;\nexport type SelectedService = z.infer<typeof selectedServiceSchema>;\n","size_bytes":3947},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport ShippingQuote from \"@/pages/shipping-quote\";\nimport Success from \"@/pages/success\"; \nimport Invoice from \"@/pages/invoice\";\nimport TrackPackage from \"@/pages/track-package\";\nimport Contact from \"@/pages/contact\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={ShippingQuote} />\n      <Route path=\"/success/:orderId\" component={Success} />\n      <Route path=\"/invoice/:id\" component={Invoice} />\n      <Route path=\"/track\" component={TrackPackage} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1202},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/quote-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport StepIndicator from \"@/components/step-indicator\";\nimport { quoteRequestSchema, type QuoteRequest } from \"@shared/schema\";\nimport { MapPin, Package, Tag } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface QuoteFormProps {\n  onQuoteReceived: (result: any) => void;\n}\n\nexport default function QuoteForm({ onQuoteReceived }: QuoteFormProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const { toast } = useToast();\n\n  const form = useForm<QuoteRequest>({\n    resolver: zodResolver(quoteRequestSchema),\n    defaultValues: {\n      origin: {\n        country: \"CA\",\n        postalCode: \"\",\n        city: \"\"\n      },\n      destination: {\n        country: \"US\",\n        postalCode: \"\",\n        city: \"\"\n      },\n      package: {\n        length: 0,\n        width: 0,\n        height: 0,\n        weight: 0,\n        value: 0\n      },\n      serviceType: \"standard\"\n    }\n  });\n\n  const quoteMutation = useMutation({\n    mutationFn: async (data: QuoteRequest) => {\n      const requestBody = {\n        origin: {\n          country: data.origin.country,\n          postal_code: data.origin.postalCode\n        },\n        destination: {\n          country: data.destination.country,\n          postal_code: data.destination.postalCode\n        },\n        parcels: [{\n          weight: data.package.weight,\n          length: data.package.length,\n          width: data.package.width,\n          height: data.package.height\n        }]\n      };\n      \n      const response = await apiRequest(\"POST\", \"/api/stallion/quote\", requestBody);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      onQuoteReceived(data);\n      toast({\n        title: \"Quote Generated\",\n        description: `Found ${data.services?.length || 0} shipping options.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to generate quote. Please try again.\",\n      });\n    }\n  });\n\n  const handleNext = () => {\n    if (currentStep === 1) {\n      setCurrentStep(2);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep === 2) {\n      setCurrentStep(1);\n    }\n  };\n\n  const onSubmit = (data: QuoteRequest) => {\n    // Store form data in localStorage for invoice generation\n    localStorage.setItem('quoteFormData', JSON.stringify(data));\n    quoteMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Calculator Card - Stallion Style */}\n      <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 relative z-10\">\n        <div className=\"p-8\">\n          <motion.div \n            className=\"text-center mb-8\"\n            initial={{ opacity: 0, y: -30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, ease: \"easeOut\" }}\n          >\n            <motion.h2 \n              className=\"text-3xl font-bold text-gray-900 mb-3\" \n              data-testid=\"page-title\"\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              whileHover={{ scale: 1.02 }}\n            >\n              Get an estimate with our shipping calculator!\n            </motion.h2>\n            <motion.p \n              className=\"text-gray-600\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n            >\n              Fast, reliable shipping across Canada and internationally\n            </motion.p>\n          </motion.div>\n\n          {/* Step Indicator */}\n          <StepIndicator currentStep={currentStep} />\n        </div>\n        \n        <div className=\"px-8 pb-8\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              \n              {/* Step 1: Addresses */}\n              {currentStep === 1 && (\n                <div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-6\" data-testid=\"step-addresses-title\">Shipping Addresses</h3>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-8\">\n                    {/* Origin Address */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"text-lg font-medium text-foreground flex items-center\" data-testid=\"origin-title\">\n                        <MapPin className=\"text-primary mr-2 h-5 w-5\" />\n                        Origin Address\n                      </h4>\n                      \n                      <div className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"origin.country\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Country</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"input-origin-country\">\n                                    <SelectValue placeholder=\"Select Country\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"CA\">Canada</SelectItem>\n                                  <SelectItem value=\"US\">United States</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"origin.postalCode\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Postal Code</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"M5V 3A8\" {...field} data-testid=\"input-origin-postal\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"origin.city\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>City</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Toronto\" {...field} data-testid=\"input-origin-city\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    {/* Destination Address */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"text-lg font-medium text-foreground flex items-center\" data-testid=\"destination-title\">\n                        <MapPin className=\"text-accent mr-2 h-5 w-5\" />\n                        Destination Address\n                      </h4>\n                      \n                      <div className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"destination.country\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Country</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"input-destination-country\">\n                                    <SelectValue placeholder=\"Select Country\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"CA\">Canada</SelectItem>\n                                  <SelectItem value=\"US\">United States</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"destination.postalCode\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Postal Code</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"10001\" {...field} data-testid=\"input-destination-postal\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"destination.city\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>City</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"New York\" {...field} data-testid=\"input-destination-city\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 2: Package Details */}\n              {currentStep === 2 && (\n                <div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-6\" data-testid=\"step-package-title\">Package Details</h3>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-8\">\n                    {/* Physical Dimensions */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"text-lg font-medium text-foreground flex items-center\" data-testid=\"dimensions-title\">\n                        <Package className=\"text-primary mr-2 h-5 w-5\" />\n                        Dimensions & Weight\n                      </h4>\n                      \n                      <div className=\"grid grid-cols-3 gap-3\">\n                        <FormField\n                          control={form.control}\n                          name=\"package.length\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Length (cm)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  placeholder=\"20\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                  data-testid=\"input-length\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"package.width\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Width (cm)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  placeholder=\"15\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                  data-testid=\"input-width\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"package.height\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Height (cm)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  placeholder=\"10\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                  data-testid=\"input-height\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"package.weight\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Weight (kg)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.1\" \n                                placeholder=\"2.5\" \n                                {...field}\n                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                data-testid=\"input-weight\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Package Value & Service */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"text-lg font-medium text-foreground flex items-center\" data-testid=\"value-service-title\">\n                        <Tag className=\"text-accent mr-2 h-5 w-5\" />\n                        Value & Service\n                      </h4>\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"package.value\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Package Value (CAD)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                placeholder=\"150.00\" \n                                {...field}\n                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                data-testid=\"input-value\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"serviceType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Service Type</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-service-type\">\n                                  <SelectValue placeholder=\"Select Service\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"economy\">Economy (5-7 business days)</SelectItem>\n                                <SelectItem value=\"standard\">Standard (3-5 business days)</SelectItem>\n                                <SelectItem value=\"express\">Express (1-2 business days)</SelectItem>\n                                <SelectItem value=\"overnight\">Overnight</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-between pt-6 border-t border-border\">\n                {currentStep === 2 && (\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={handleBack}\n                    data-testid=\"button-back\"\n                  >\n                    ← Back\n                  </Button>\n                )}\n                {currentStep === 1 && <div />}\n                \n                <div className=\"flex space-x-3\">\n                  {currentStep === 1 && (\n                    <Button \n                      type=\"button\" \n                      onClick={handleNext}\n                      className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg font-semibold text-lg\"\n                      data-testid=\"button-continue\"\n                    >\n                      Continue →\n                    </Button>\n                  )}\n                  {currentStep === 2 && (\n                    <Button \n                      type=\"submit\" \n                      disabled={quoteMutation.isPending}\n                      className=\"bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 rounded-lg font-semibold text-lg disabled:opacity-50\"\n                      data-testid=\"button-get-quote\"\n                    >\n                      {quoteMutation.isPending ? \"Calculating...\" : \"Get Rates & Save!\"}\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </form>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19525},"client/src/components/quote-results.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { StallionService } from \"@shared/schema\";\nimport { FileText, Plus, User } from \"lucide-react\";\n\ninterface QuoteResultsProps {\n  selectedService: StallionService;\n  onNewQuote: () => void;\n}\n\nexport default function QuoteResults({ selectedService, onNewQuote }: QuoteResultsProps) {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  // Customer information for invoice\n  const [customerInfo, setCustomerInfo] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    company: \"\"\n  });\n\n  const generateInvoiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/invoice\", data);\n      return response.json();\n    },\n    onSuccess: (invoice) => {\n      setLocation(`/invoice/${invoice.id}`);\n      toast({\n        title: \"Invoice Generated & Emailed\",\n        description: \"Your invoice has been created and sent to your email address.\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to generate invoice. Please try again.\",\n      });\n    }\n  });\n\n  const handleGenerateInvoice = () => {\n    // Get form data from the browser's localStorage or form context\n    // For now, we'll use placeholder data that matches the quote structure\n    const formData = JSON.parse(localStorage.getItem('quoteFormData') || '{}');\n    \n    generateInvoiceMutation.mutate({\n      selectedService,\n      customerInfo,\n      origin: formData.origin || { country: \"CA\", postalCode: \"Unknown\", city: \"Unknown\" },\n      destination: formData.destination || { country: \"US\", postalCode: \"Unknown\", city: \"Unknown\" },\n      package: formData.package || { length: 0, width: 0, height: 0, weight: 0, value: 0 }\n    }, {\n      onSuccess: (data) => {\n        toast({\n          title: \"🎉 Invoice Generated Successfully!\",\n          description: `Thank you ${customerInfo.name}! Invoice ${data.invoiceNumber} has been created and emailed to you with tracking number: ${data.provisionalTracking}`,\n          duration: 8000,\n        });\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to generate invoice. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    });\n  };\n\n  const getServiceDisplayName = (serviceType: string) => {\n    const serviceMap = {\n      economy: \"Economy (5-7 business days)\",\n      standard: \"Standard (3-5 business days)\", \n      express: \"Express (1-2 business days)\",\n      overnight: \"Overnight\"\n    };\n    return serviceMap[serviceType as keyof typeof serviceMap] || serviceType;\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header - Stallion Style */}\n      <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-8 text-center\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-3\" data-testid=\"quote-results-title\">Generate Invoice</h2>\n        <p className=\"text-gray-600\">Complete your customer information to generate your professional invoice</p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-8\">\n        {/* Customer Information */}\n        <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-8\">\n            <h3 className=\"text-xl font-semibold text-foreground mb-6 flex items-center\">\n              <User className=\"mr-2 h-5 w-5\" />\n              Customer Information\n            </h3>\n            \n            <div className=\"space-y-4\">\n              {/* Sender Information */}\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800 mb-6\">\n                <h3 className=\"font-semibold text-blue-800 dark:text-blue-200 mb-3 flex items-center gap-2\">\n                  📤 Sender Information\n                </h3>\n                <div className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\n                  <p><strong>Name:</strong> Ali Topping</p>\n                  <p><strong>Company:</strong> Topping Courier Inc.</p>\n                  <p><strong>Address:</strong> 87 Windrow Street</p>\n                  <p><strong>Phone:</strong> 647-339-0222</p>\n                  <p><strong>Email:</strong> info@toppingcourier.ca</p>\n                </div>\n              </div>\n\n              {/* Recipient Information Header */}\n              <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 rounded-lg border border-orange-200 dark:border-orange-800 mb-4\">\n                <h4 className=\"font-semibold text-orange-800 dark:text-orange-200 flex items-center gap-2\">\n                  📥 Recipient Information\n                </h4>\n              </div>\n\n              <div>\n                <Label htmlFor=\"customer-name\">Full Name</Label>\n                <Input \n                  id=\"customer-name\"\n                  value={customerInfo.name}\n                  onChange={(e) => setCustomerInfo({...customerInfo, name: e.target.value})}\n                  placeholder=\"John Doe\"\n                  data-testid=\"input-customer-name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customer-company\">Company (Optional)</Label>\n                <Input \n                  id=\"customer-company\"\n                  value={customerInfo.company}\n                  onChange={(e) => setCustomerInfo({...customerInfo, company: e.target.value})}\n                  placeholder=\"Acme Inc.\"\n                  data-testid=\"input-customer-company\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customer-email\">Email</Label>\n                <Input \n                  id=\"customer-email\"\n                  type=\"email\"\n                  value={customerInfo.email}\n                  onChange={(e) => setCustomerInfo({...customerInfo, email: e.target.value})}\n                  placeholder=\"john@example.com\"\n                  data-testid=\"input-customer-email\"\n                />\n                <p className=\"text-sm text-blue-600 mt-1\">\n                  📧 Invoice will be automatically emailed to this address\n                </p>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customer-phone\">Phone</Label>\n                <Input \n                  id=\"customer-phone\"\n                  value={customerInfo.phone}\n                  onChange={(e) => setCustomerInfo({...customerInfo, phone: e.target.value})}\n                  placeholder=\"(416) 555-0123\"\n                  data-testid=\"input-customer-phone\"\n                />\n              </div>\n            </div>\n        </div>\n\n        {/* Selected Service Summary */}\n        <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-8\">\n            <h3 className=\"text-xl font-semibold text-foreground mb-6\">Selected Service</h3>\n            \n            <div className=\"space-y-4 mb-6\">\n              <div className=\"flex justify-between items-center py-2 border-b border-border\">\n                <span className=\"text-muted-foreground\">Carrier:</span>\n                <span className=\"font-medium text-foreground\" data-testid=\"text-selected-carrier\">\n                  {selectedService.carrier}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center py-2 border-b border-border\">\n                <span className=\"text-muted-foreground\">Service:</span>\n                <span className=\"font-medium text-foreground\" data-testid=\"text-selected-service\">\n                  {selectedService.service_name}\n                </span>\n              </div>\n              {selectedService.delivery_days && (\n                <div className=\"flex justify-between items-center py-2 border-b border-border\">\n                  <span className=\"text-muted-foreground\">Delivery:</span>\n                  <span className=\"font-medium text-foreground\" data-testid=\"text-selected-delivery\">\n                    {selectedService.delivery_days} business days\n                  </span>\n                </div>\n              )}\n            </div>\n\n            {/* Price Breakdown */}\n            <div className=\"bg-muted rounded-lg p-6 space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Service:</span>\n                <span className=\"font-medium text-foreground\">\n                  {selectedService.service_name}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Carrier:</span>\n                <span className=\"font-medium text-foreground\">\n                  {selectedService.carrier}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Delivery Time:</span>\n                <span className=\"font-medium text-foreground\">\n                  {selectedService.delivery_days} business days\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center pt-4 border-t-2 border-primary\">\n                <span className=\"text-lg font-semibold text-foreground\">Total Price (All-Inclusive):</span>\n                <span className=\"text-2xl font-bold text-primary\" data-testid=\"text-final-total\">\n                  ${selectedService.total.toFixed(2)} CAD\n                </span>\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                * Includes pickup, delivery, insurance, and all applicable taxes\n              </p>\n            </div>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-center space-x-4\">\n        <Button \n          variant=\"outline\" \n          onClick={onNewQuote}\n          data-testid=\"button-new-quote\"\n        >\n          <Plus className=\"mr-2 h-4 w-4\" />\n          New Quote\n        </Button>\n        <Button \n          onClick={handleGenerateInvoice}\n          disabled={generateInvoiceMutation.isPending || !customerInfo.name || !customerInfo.email}\n          className=\"bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 rounded-lg font-semibold text-lg disabled:opacity-50\"\n          data-testid=\"button-generate-invoice\"\n        >\n          <FileText className=\"mr-2 h-4 w-4\" />\n          {generateInvoiceMutation.isPending ? \"Generating...\" : \"Generate Invoice\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10987},"client/src/components/service-selector.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport type { StallionQuoteResponse, StallionService } from \"@shared/schema\";\nimport { Truck, Clock, Calculator } from \"lucide-react\";\n\ninterface ServiceSelectorProps {\n  quoteData: StallionQuoteResponse;\n  onServiceSelected: (service: StallionService) => void;\n  onBack: () => void;\n}\n\nexport default function ServiceSelector({ quoteData, onServiceSelected, onBack }: ServiceSelectorProps) {\n  const [selectedServiceId, setSelectedServiceId] = useState<string>(\"\");\n\n  const handleContinue = () => {\n    const selectedService = quoteData.services.find((_, index) => index.toString() === selectedServiceId);\n    if (selectedService) {\n      onServiceSelected(selectedService);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header - Stallion Style */}\n      <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"service-selector-title\">\n              Choose Your Shipping Service\n            </h2>\n            <p className=\"text-gray-600\">\n              Select from {quoteData.services.length} available shipping options for your package\n            </p>\n          </div>\n          <Button \n            variant=\"outline\" \n            onClick={onBack}\n            className=\"bg-white border-gray-300 text-gray-700 hover:bg-gray-50 px-6 py-2\"\n            data-testid=\"button-back\"\n          >\n            ← Back to Calculator\n          </Button>\n        </div>\n      </div>\n\n      {/* Services List */}\n      <div className=\"bg-white rounded-2xl shadow-lg border border-gray-200 p-8\">\n          <RadioGroup value={selectedServiceId} onValueChange={setSelectedServiceId}>\n            <div className=\"space-y-4\">\n              {quoteData.services.map((service, index) => (\n                <div key={index} className=\"border border-gray-200 rounded-xl p-6 hover:bg-blue-50 hover:border-blue-300 transition-all duration-200 cursor-pointer\">\n                  <div className=\"flex items-center space-x-4\">\n                    <RadioGroupItem value={index.toString()} id={`service-${index}`} data-testid={`radio-service-${index}`} />\n                    <Label htmlFor={`service-${index}`} className=\"flex-1 cursor-pointer\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-center\">\n                        {/* Service Info */}\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Truck className=\"h-4 w-4 text-primary\" />\n                            <span className=\"font-semibold text-foreground\" data-testid={`service-name-${index}`}>\n                              {service.service_name}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`carrier-${index}`}>\n                            {service.carrier}\n                          </p>\n                          {service.delivery_days && (\n                            <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n                              <Clock className=\"h-3 w-3\" />\n                              <span data-testid={`delivery-days-${index}`}>\n                                {service.delivery_days} business days\n                              </span>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Service Features */}\n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-muted-foreground\">Service Includes</p>\n                          <p className=\"text-sm font-medium text-foreground\">\n                            Pickup + Delivery + Insurance\n                          </p>\n                        </div>\n\n                        {/* Total Price */}\n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-muted-foreground\">Total Price</p>\n                          <p className=\"text-xl font-bold text-primary\" data-testid={`total-price-${index}`}>\n                            ${service.total.toFixed(2)} {quoteData.currency}\n                          </p>\n                        </div>\n                      </div>\n                    </Label>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </RadioGroup>\n\n          {/* Selected Service Summary */}\n          {selectedServiceId && (\n            <div className=\"mt-8 p-6 bg-muted rounded-lg\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                <Calculator className=\"mr-2 h-5 w-5\" />\n                Service Summary\n              </h3>\n              {(() => {\n                const selectedService = quoteData.services[parseInt(selectedServiceId)];\n                return (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-muted-foreground\">Selected Service:</span>\n                      <span className=\"font-medium\">{selectedService.service_name}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-muted-foreground\">Carrier:</span>\n                      <span className=\"font-medium\">{selectedService.carrier}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-muted-foreground\">Delivery Time:</span>\n                      <span className=\"font-medium\">{selectedService.delivery_days} business days</span>\n                    </div>\n                    <div className=\"flex justify-between items-center pt-4 border-t-2 border-primary\">\n                      <span className=\"text-lg font-semibold\">Total Price (All-Inclusive):</span>\n                      <span className=\"text-xl font-bold text-primary\" data-testid=\"breakdown-total\">\n                        ${selectedService.total.toFixed(2)} {quoteData.currency}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      * Includes pickup, delivery, insurance, and all applicable taxes\n                    </p>\n                  </div>\n                );\n              })()}\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between pt-8 border-t border-border\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onBack}\n              data-testid=\"button-back-to-form\"\n            >\n              ← Back to Form\n            </Button>\n            \n            <Button \n              onClick={handleContinue}\n              disabled={!selectedServiceId}\n              className=\"bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 rounded-lg font-semibold text-lg disabled:opacity-50\"\n              data-testid=\"button-continue-to-invoice\"\n            >\n              Continue to Invoice →\n            </Button>\n          </div>\n        </div>\n    </div>\n  );\n}","size_bytes":7655},"client/src/components/step-indicator.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\ninterface StepIndicatorProps {\n  currentStep: number;\n}\n\nexport default function StepIndicator({ currentStep }: StepIndicatorProps) {\n  const steps = [\n    { number: 1, title: \"Addresses\" },\n    { number: 2, title: \"Package Details\" },\n    { number: 3, title: \"Service & Quote\" }\n  ];\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-center space-x-8\">\n          {steps.map((step, index) => (\n            <div key={step.number} className=\"flex items-center\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <div \n                    className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                      step.number <= currentStep \n                        ? 'bg-primary text-primary-foreground' \n                        : 'bg-muted text-muted-foreground'\n                    }`}\n                    data-testid={`step-${step.number}`}\n                  >\n                    {step.number}\n                  </div>\n                </div>\n                <div className=\"ml-3\">\n                  <p \n                    className={`text-sm font-medium ${\n                      step.number <= currentStep \n                        ? 'text-foreground' \n                        : 'text-muted-foreground'\n                    }`}\n                  >\n                    {step.title}\n                  </p>\n                </div>\n              </div>\n              \n              {index < steps.length - 1 && (\n                <div className=\"flex-shrink-0 w-16 h-px bg-border ml-8\"></div>\n              )}\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1835},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/shipping-api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { QuoteRequest } from \"@shared/schema\";\n\nexport const shippingApi = {\n  getQuote: async (data: QuoteRequest) => {\n    const response = await apiRequest(\"POST\", \"/api/quote\", data);\n    return response.json();\n  },\n\n  generateInvoice: async (quoteData: any) => {\n    const response = await apiRequest(\"POST\", \"/api/invoice\", quoteData);\n    return response.json();\n  },\n\n  getInvoice: async (id: string) => {\n    const response = await apiRequest(\"GET\", `/api/invoice/${id}`);\n    return response.json();\n  },\n\n  downloadInvoicePDF: async (id: string) => {\n    const response = await fetch(`/api/invoice/${id}/pdf`);\n    if (!response.ok) {\n      throw new Error(\"Failed to download PDF\");\n    }\n    return response.blob();\n  }\n};\n","size_bytes":786},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/invoice.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Download, Printer, Mail, ArrowLeft } from \"lucide-react\";\nimport type { Invoice } from \"@shared/schema\";\n\nexport default function Invoice() {\n  const [match, params] = useRoute(\"/invoice/:id\");\n  const { toast } = useToast();\n\n  const { data: invoice, isLoading, error } = useQuery<Invoice>({\n    queryKey: ['/api/invoice', params?.id],\n    enabled: !!params?.id\n  });\n\n  const handleDownloadPDF = async () => {\n    try {\n      const response = await fetch(`/api/invoice/${params?.id}/pdf`);\n      if (!response.ok) throw new Error('Failed to download PDF');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `invoice-${invoice?.number}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"PDF Downloaded\",\n        description: \"Your invoice PDF has been downloaded successfully.\",\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Download Failed\",\n        description: \"Failed to download PDF. Please try again.\",\n      });\n    }\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const handleGoBack = () => {\n    window.history.back();\n  };\n\n  const getServiceDisplayName = (serviceType: string) => {\n    const serviceMap = {\n      economy: \"Economy (5-7 business days)\",\n      standard: \"Standard (3-5 business days)\", \n      express: \"Express (1-2 business days)\",\n      overnight: \"Overnight\"\n    };\n    return serviceMap[serviceType as keyof typeof serviceMap] || serviceType;\n  };\n\n  if (!match || !params?.id) {\n    return <div>Invoice not found</div>;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"max-w-4xl mx-auto px-4 py-8\">\n          <Skeleton className=\"h-8 w-48 mb-8\" />\n          <Card>\n            <CardContent className=\"p-8 space-y-6\">\n              <Skeleton className=\"h-20 w-full\" />\n              <Skeleton className=\"h-32 w-full\" />\n              <Skeleton className=\"h-48 w-full\" />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !invoice) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Invoice Not Found</h1>\n            <p className=\"text-muted-foreground mb-6\">The invoice you're looking for doesn't exist or has been removed.</p>\n            <Button onClick={handleGoBack} data-testid=\"button-go-back\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Go Back\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"text-center mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground\" data-testid=\"invoice-title\">Invoice</h2>\n          <p className=\"mt-2 text-muted-foreground\">Your shipping quote invoice</p>\n        </div>\n\n        {/* Invoice Document */}\n        <Card className=\"shadow-lg\">\n          {/* Invoice Header */}\n          <div className=\"p-8 border-b border-border\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-primary\" data-testid=\"company-name\">Topping Courier Inc.</h1>\n                <div className=\"mt-2 text-muted-foreground\">\n                  <p data-testid=\"company-address\">87 Windrow Street</p>\n                  <p data-testid=\"company-phone\">Tel: 647-339-0222</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <h2 className=\"text-2xl font-bold text-foreground\">INVOICE</h2>\n                <div className=\"mt-2 text-muted-foreground\">\n                  <p>Invoice #: <span className=\"font-medium text-foreground\" data-testid=\"invoice-number\">{invoice.number}</span></p>\n                  <p>Date: <span className=\"font-medium text-foreground\" data-testid=\"invoice-date\">{invoice.date}</span></p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Shipping Information */}\n          <div className=\"p-8 border-b border-border\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Shipping Route:</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <p className=\"font-medium text-foreground\">From:</p>\n                    <p className=\"text-muted-foreground\" data-testid=\"shipping-origin\">\n                      {invoice.origin?.city || 'N/A'}, {invoice.origin?.postalCode || 'N/A'}, {invoice.origin?.country || 'N/A'}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">To:</p>\n                    <p className=\"text-muted-foreground\" data-testid=\"shipping-destination\">\n                      {invoice.destination?.city || 'N/A'}, {invoice.destination?.postalCode || 'N/A'}, {invoice.destination?.country || 'N/A'}\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Tracking Number */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Tracking Information:</h3>\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <p className=\"font-medium text-foreground\">Provisional Tracking Number:</p>\n                  <p className=\"text-blue-700 font-mono text-lg\" data-testid=\"tracking-number\">\n                    {invoice.provisionalTracking}\n                  </p>\n                  <p className=\"text-sm text-blue-600 mt-2\">\n                    * Final tracking number will be provided upon shipment processing\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Package Details Table */}\n          <div className=\"p-8 border-b border-border\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\" data-testid=\"package-details-title\">Package Details</h3>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-border\">\n                    <th className=\"text-left py-2 text-muted-foreground font-medium\">Description</th>\n                    <th className=\"text-left py-2 text-muted-foreground font-medium\">Dimensions</th>\n                    <th className=\"text-left py-2 text-muted-foreground font-medium\">Weight</th>\n                    <th className=\"text-left py-2 text-muted-foreground font-medium\">Value</th>\n                    <th className=\"text-right py-2 text-muted-foreground font-medium\">Service</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr className=\"border-b border-border\">\n                    <td className=\"py-3 text-foreground\" data-testid=\"package-description\">Standard Package</td>\n                    <td className=\"py-3 text-muted-foreground\" data-testid=\"package-dimensions\">\n                      {invoice.package?.length || 0} × {invoice.package?.width || 0} × {invoice.package?.height || 0} cm\n                    </td>\n                    <td className=\"py-3 text-muted-foreground\" data-testid=\"package-weight\">\n                      {invoice.package?.weight || 0} kg\n                    </td>\n                    <td className=\"py-3 text-muted-foreground\" data-testid=\"package-value\">\n                      ${(invoice.package?.value || 0).toFixed(2)}\n                    </td>\n                    <td className=\"py-3 text-right text-muted-foreground\" data-testid=\"service-name\">\n                      {invoice.selectedService?.service_name || 'Standard Service'}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Invoice Totals */}\n          <div className=\"p-8\">\n            <div className=\"flex justify-end\">\n              <div className=\"w-80\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Base Shipping Rate:</span>\n                    <span className=\"font-medium text-foreground\" data-testid=\"invoice-base-rate\">\n                      ${(invoice.selectedService?.base || 0).toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Service Markup (50%):</span>\n                    <span className=\"font-medium text-foreground\" data-testid=\"invoice-markup\">\n                      ${(invoice.selectedService?.markup || 0).toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center pb-3 border-b border-border\">\n                    <span className=\"text-muted-foreground\">Subtotal:</span>\n                    <span className=\"font-medium text-foreground\" data-testid=\"invoice-subtotal\">\n                      ${(invoice.selectedService?.subtotal || 0).toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Tax (13% HST):</span>\n                    <span className=\"font-medium text-foreground\" data-testid=\"invoice-tax\">\n                      ${(invoice.selectedService?.tax || 0).toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center pt-3 border-t-2 border-primary\">\n                    <span className=\"text-xl font-bold text-foreground\">Total Amount:</span>\n                    <span className=\"text-2xl font-bold text-primary\" data-testid=\"invoice-total\">\n                      ${(invoice.selectedService?.total || 0).toFixed(2)} CAD\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Invoice Actions */}\n            <div className=\"flex justify-center space-x-4 mt-8 pt-6 border-t border-border print:hidden\">\n              <Button onClick={handleDownloadPDF} data-testid=\"button-download-pdf\">\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download PDF\n              </Button>\n              <Button variant=\"outline\" onClick={handlePrint} data-testid=\"button-print-invoice\">\n                <Printer className=\"mr-2 h-4 w-4\" />\n                Printer Invoice\n              </Button>\n              <Button variant=\"outline\" onClick={handleGoBack} data-testid=\"button-back-to-quote\">\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back to Quote\n              </Button>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11699},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/shipping-quote.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport MultiStepForm from \"@/components/multi-step-form\";\nimport logoPath from \"@assets/Topping-Courier-PNG_070319_1756363417572.png\";\n\nexport default function ShippingQuote() {\n  const [, setLocation] = useLocation();\n\n  const handleOrderComplete = (order: any) => {\n    setLocation(`/success/${order.id}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header with Logo */}\n      <header className=\"bg-white border-b border-gray-200 shadow-sm sticky top-0 z-50 backdrop-blur-md\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center space-x-3\">\n                <motion.img \n                  src={logoPath} \n                  alt=\"Topping Express\" \n                  className=\"h-14 w-auto object-contain\"\n                  initial={{ scale: 0.8, rotate: -5 }}\n                  animate={{ scale: 1, rotate: 0 }}\n                  transition={{ duration: 0.6, ease: \"easeOut\" }}\n                  whileHover={{ scale: 1.05 }}\n                />\n                <div>\n                  <h1 className=\"text-xl font-bold text-blue-600\" data-testid=\"header-title\">Topping Express</h1>\n                  <p className=\"text-xs text-gray-500\">Express Shipping Solutions</p>\n                </div>\n              </div>\n            </div>\n            <nav className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-8\">\n                <a href=\"/\" className=\"text-blue-600 font-semibold px-3 py-2 text-sm\" data-testid=\"nav-quote\">Get Quote</a>\n                <a href=\"/track\" className=\"text-gray-600 hover:text-blue-600 px-3 py-2 text-sm font-medium\" data-testid=\"nav-track\">Track Package</a>\n                <a href=\"/contact\" className=\"text-gray-600 hover:text-blue-600 px-3 py-2 text-sm font-medium\" data-testid=\"nav-contact\">Contact</a>\n              </div>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-br from-blue-600 via-blue-700 to-blue-800 text-white py-16 relative\">\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div \n            className=\"text-center\"\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, ease: \"easeOut\" }}\n          >\n            <motion.h1 \n              className=\"text-4xl md:text-5xl font-bold leading-tight mb-4\"\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 1, ease: \"easeOut\", delay: 0.2 }}\n            >\n              <motion.span\n                initial={{ opacity: 0, x: -50 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8, delay: 0.4 }}\n              >\n                Get an estimate with our\n              </motion.span>\n              <br />\n              <motion.span \n                className=\"text-blue-200\"\n                initial={{ opacity: 0, x: 50 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8, delay: 0.6 }}\n                whileHover={{ scale: 1.05, color: \"#fbbf24\" }}\n              >\n                shipping calculator!\n              </motion.span>\n            </motion.h1>\n            <motion.p \n              className=\"text-xl text-blue-100 mb-8 max-w-3xl mx-auto\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.8 }}\n            >\n              Fast, reliable shipping across Canada and internationally\n            </motion.p>\n          </motion.div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"-mt-8\">\n          <MultiStepForm onOrderComplete={handleOrderComplete} />\n        </div>\n      </div>\n\n      {/* Footer - Stallion-style */}\n      <footer className=\"bg-gray-900 text-white mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"md:col-span-2\">\n              <h3 className=\"text-xl font-bold text-blue-400 mb-4\">Topping Courier Inc.</h3>\n              <p className=\"text-gray-300 mb-4\">\n                Professional shipping and courier services for businesses and individuals. \n                Fast, reliable, and affordable shipping solutions across Canada and internationally.\n              </p>\n              <div className=\"text-gray-400 text-sm\">\n                <p>Topping Courier Inc.</p>\n                <p>87 Windrow Street</p>\n                <p>Richmond Hill, ON</p>\n                <p>Tel: 647-339-0222</p>\n                <p>Email: info@toppingcourier.ca</p>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-white mb-4\">Services</h4>\n              <ul className=\"space-y-2 text-gray-300 text-sm\">\n                <li><a href=\"#\" className=\"hover:text-blue-400\">Shipping Calculator</a></li>\n                <li><a href=\"#\" className=\"hover:text-blue-400\">Package Tracking</a></li>\n                <li><a href=\"#\" className=\"hover:text-blue-400\">Bulk Shipping</a></li>\n                <li><a href=\"#\" className=\"hover:text-blue-400\">Express Delivery</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-white mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-gray-300 text-sm\">\n                <li><a href=\"#\" className=\"hover:text-blue-400\">Contact Us</a></li>\n                <li><a href=\"#\" className=\"hover:text-blue-400\">Help Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-blue-400\">Shipping Guide</a></li>\n                <li><a href=\"#\" className=\"hover:text-blue-400\">API Documentation</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400 text-sm\">\n            <p>&copy; 2024 Topping Courier Inc. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6484},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/multi-step-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form } from \"@/components/ui/form\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion } from \"framer-motion\";\nimport StepSender from \"./steps/step-sender\";\nimport StepRecipient from \"./steps/step-recipient\";\nimport StepPackage from \"./steps/step-package\";\nimport StepQuote from \"./steps/step-quote\";\nimport { multiStepFormSchema, type MultiStepForm, type StallionQuoteResponse } from \"@shared/schema\";\nimport logoPath from \"@assets/Topping-Courier-PNG_070319_1756363417572.png\";\n\ninterface MultiStepFormProps {\n  onOrderComplete: (order: any) => void;\n}\n\ntype StepType = 'sender' | 'recipient' | 'package' | 'quote';\n\nconst steps: { id: StepType; title: string; description: string }[] = [\n  { id: 'sender', title: 'Sender Information', description: 'From address details' },\n  { id: 'recipient', title: 'Recipient Information', description: 'To address details' },\n  { id: 'package', title: 'Package Details', description: 'Weight, dimensions & value' },\n  { id: 'quote', title: 'Quote Results', description: 'Select service & confirm order' }\n];\n\nexport default function MultiStepForm({ onOrderComplete }: MultiStepFormProps) {\n  const [currentStep, setCurrentStep] = useState<StepType>('sender');\n  const [quoteData, setQuoteData] = useState<StallionQuoteResponse | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<MultiStepForm>({\n    resolver: zodResolver(multiStepFormSchema),\n    defaultValues: {\n      sender: {\n        fullName: \"\",\n        company: \"\",\n        phone: \"\",\n        email: \"\",\n        address1: \"\",\n        address2: \"\",\n        city: \"\",\n        province: \"\",\n        postalCode: \"\",\n        country: \"CA\"\n      },\n      recipient: {\n        fullName: \"\",\n        company: \"\",\n        phone: \"\",\n        email: \"\",\n        address1: \"\",\n        address2: \"\",\n        city: \"\",\n        province: \"\",\n        postalCode: \"\",\n        country: \"US\"\n      },\n      package: {\n        length: 10,\n        width: 10,\n        height: 10,\n        weight: 1,\n        value: 100\n      }\n    }\n  });\n\n  const getCurrentStepIndex = () => steps.findIndex(step => step.id === currentStep);\n  const progress = ((getCurrentStepIndex() + 1) / steps.length) * 100;\n\n  const canGoNext = () => {\n    const stepIndex = getCurrentStepIndex();\n    if (stepIndex === 0) {\n      // Validate sender step\n      const senderData = form.getValues('sender');\n      return senderData.fullName && senderData.email && senderData.phone && \n             senderData.address1 && senderData.city && senderData.province && senderData.postalCode;\n    }\n    if (stepIndex === 1) {\n      // Validate recipient step\n      const recipientData = form.getValues('recipient');\n      return recipientData.fullName && recipientData.email && recipientData.phone && \n             recipientData.address1 && recipientData.city && recipientData.province && recipientData.postalCode;\n    }\n    if (stepIndex === 2) {\n      // Validate package step\n      const packageData = form.getValues('package');\n      return packageData.weight > 0 && packageData.length > 0 && packageData.width > 0 && packageData.height > 0;\n    }\n    return false;\n  };\n\n  const handleNext = () => {\n    const stepIndex = getCurrentStepIndex();\n    if (stepIndex < steps.length - 1) {\n      setCurrentStep(steps[stepIndex + 1].id);\n      if (steps[stepIndex + 1].id === 'quote' && !quoteData) {\n        // Trigger quote fetch when moving to quote step\n        handleGetQuote();\n      }\n    }\n  };\n\n  const handlePrevious = () => {\n    const stepIndex = getCurrentStepIndex();\n    if (stepIndex > 0) {\n      setCurrentStep(steps[stepIndex - 1].id);\n    }\n  };\n\n  const handleGetQuote = async () => {\n    const formData = form.getValues();\n    \n    const quoteRequest = {\n      origin: {\n        country: formData.sender.country,\n        postalCode: formData.sender.postalCode,\n        city: formData.sender.city,\n        province: formData.sender.province\n      },\n      destination: {\n        country: formData.recipient.country,\n        postalCode: formData.recipient.postalCode,\n        city: formData.recipient.city,\n        province: formData.recipient.province\n      },\n      package: formData.package\n    };\n\n    try {\n      const response = await fetch('/api/quote', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(quoteRequest)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        throw new Error(errorData?.message || 'Failed to get quote');\n      }\n\n      const quote = await response.json();\n      setQuoteData(quote);\n    } catch (error) {\n      console.error('Quote error:', error);\n      toast({\n        title: \"Quote Error\",\n        description: error instanceof Error ? error.message : \"Failed to get shipping quote. Please check your postal codes and try again.\",\n        variant: \"destructive\",\n      });\n      setQuoteData({ currency: \"CAD\", services: [] }); // Set empty result to show error state\n    }\n  };\n\n  const copyFromSender = () => {\n    const senderData = form.getValues('sender');\n    form.setValue('recipient', { ...senderData });\n  };\n\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 'sender':\n        return <StepSender form={form} />;\n      case 'recipient':\n        return <StepRecipient form={form} copyFromSender={copyFromSender} />;\n      case 'package':\n        return <StepPackage form={form} />;\n      case 'quote':\n        return (\n          <StepQuote \n            form={form} \n            quoteData={quoteData} \n            onOrderComplete={onOrderComplete}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Progress Bar */}\n      <div className=\"mb-8\">\n        <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n          {steps.map((step, index) => (\n            <span \n              key={step.id} \n              className={`${index <= getCurrentStepIndex() ? 'text-blue-600 font-semibold' : ''}`}\n            >\n              {step.title}\n            </span>\n          ))}\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <span className=\"bg-blue-600 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold\">\n              {getCurrentStepIndex() + 1}\n            </span>\n            {steps[getCurrentStepIndex()]?.title}\n          </CardTitle>\n          <CardDescription>\n            {steps[getCurrentStepIndex()]?.description}\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form className=\"space-y-6\">\n              {renderCurrentStep()}\n            </form>\n          </Form>\n\n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between mt-8 pt-6 border-t\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handlePrevious}\n              disabled={getCurrentStepIndex() === 0}\n              data-testid=\"button-previous\"\n            >\n              <ChevronLeft className=\"mr-2 h-4 w-4\" />\n              Previous\n            </Button>\n\n            {currentStep !== 'quote' && (\n              <Button\n                type=\"button\"\n                onClick={handleNext}\n                disabled={!canGoNext()}\n                data-testid=\"button-next\"\n              >\n                Next\n                <ChevronRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8140},"client/src/components/steps/step-package.tsx":{"content":"import { UseFormReturn } from \"react-hook-form\";\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { MultiStepForm } from \"@shared/schema\";\n\ninterface StepPackageProps {\n  form: UseFormReturn<MultiStepForm>;\n}\n\nexport default function StepPackage({ form }: StepPackageProps) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h3 className=\"font-semibold text-blue-900 mb-2\">Package Information</h3>\n        <p className=\"text-sm text-blue-700\">\n          Please provide accurate measurements and weight for accurate shipping quotes.\n          All dimensions should be in centimeters (cm) and weight in kilograms (kg).\n        </p>\n      </div>\n\n      <div className=\"grid md:grid-cols-3 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"package.length\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Length (cm) *</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  min=\"0.1\" \n                  step=\"0.1\"\n                  placeholder=\"10\"\n                  {...field}\n                  onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\n                  data-testid=\"input-package-length\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"package.width\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Width (cm) *</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  min=\"0.1\" \n                  step=\"0.1\"\n                  placeholder=\"10\"\n                  {...field}\n                  onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\n                  data-testid=\"input-package-width\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"package.height\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Height (cm) *</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  min=\"0.1\" \n                  step=\"0.1\"\n                  placeholder=\"10\"\n                  {...field}\n                  onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\n                  data-testid=\"input-package-height\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"package.weight\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Weight (kg) *</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  min=\"0.1\" \n                  step=\"0.1\"\n                  placeholder=\"1.0\"\n                  {...field}\n                  onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\n                  data-testid=\"input-package-weight\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"package.value\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Declared Value (CAD) *</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  min=\"0\" \n                  step=\"0.01\"\n                  placeholder=\"100.00\"\n                  {...field}\n                  onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\n                  data-testid=\"input-package-value\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n        <h4 className=\"font-semibold text-yellow-900 mb-2\">📏 Measurement Tips</h4>\n        <ul className=\"text-sm text-yellow-800 space-y-1\">\n          <li>• Measure the longest side for length</li>\n          <li>• Include any packaging materials in your measurements</li>\n          <li>• Round up to the nearest centimeter</li>\n          <li>• Weight should include packaging</li>\n        </ul>\n      </div>\n    </div>\n  );\n}","size_bytes":4780},"client/src/components/steps/step-quote.tsx":{"content":"import { useState } from \"react\";\nimport { UseFormReturn } from \"react-hook-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle, Clock, Package, Truck } from \"lucide-react\";\nimport { MultiStepForm, StallionQuoteResponse, StallionService } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface StepQuoteProps {\n  form: UseFormReturn<MultiStepForm>;\n  quoteData: StallionQuoteResponse | null;\n  onOrderComplete: (order: any) => void;\n}\n\nexport default function StepQuote({ form, quoteData, onOrderComplete }: StepQuoteProps) {\n  const [selectedService, setSelectedService] = useState<StallionService | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleServiceSelect = (service: StallionService) => {\n    setSelectedService(service);\n  };\n\n  const handleConfirmOrder = async () => {\n    if (!selectedService) {\n      toast({\n        title: \"No Service Selected\",\n        description: \"Please select a shipping service to continue.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const formData = form.getValues();\n      \n      const orderData = {\n        sender: formData.sender,\n        recipient: formData.recipient,\n        package: formData.package,\n        selectedService\n      };\n\n      const response = await fetch('/api/order', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(orderData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create order');\n      }\n\n      const order = await response.json();\n      onOrderComplete(order);\n\n    } catch (error) {\n      console.error('Order error:', error);\n      toast({\n        title: \"Order Failed\",\n        description: \"Failed to create order. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!quoteData) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4 mx-auto\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-1/2 mx-auto\"></div>\n        </div>\n        <p className=\"mt-4 text-gray-600\">Getting shipping quotes...</p>\n      </div>\n    );\n  }\n\n  if (quoteData.services?.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n          <h3 className=\"font-semibold text-red-900 mb-2\">⚠️ Quote Error</h3>\n          <p className=\"text-sm text-red-700 mb-4\">\n            No shipping rates available for the provided addresses.\n          </p>\n          <p className=\"text-xs text-red-600\">\n            Please check that your postal codes are correct and try again.\n          </p>\n          <Button \n            onClick={() => window.location.reload()} \n            variant=\"outline\" \n            className=\"mt-4 border-red-300 text-red-700 hover:bg-red-50\"\n          >\n            Try Again\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n        <h3 className=\"font-semibold text-green-900 mb-2\">🎉 Quotes Available!</h3>\n        <p className=\"text-sm text-green-700\">\n          We found {quoteData.services.length} shipping option{quoteData.services.length > 1 ? 's' : ''} for your package.\n          Select your preferred service and confirm your order.\n        </p>\n      </div>\n\n      <div className=\"space-y-4\">\n        {quoteData.services.map((service, index) => (\n          <Card \n            key={index}\n            className={`cursor-pointer transition-all hover:shadow-md ${\n              selectedService === service ? 'ring-2 ring-blue-500 bg-blue-50' : ''\n            }`}\n            onClick={() => handleServiceSelect(service)}\n            data-testid={`service-option-${index}`}\n          >\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className={`w-4 h-4 rounded-full border-2 ${\n                    selectedService === service \n                      ? 'bg-blue-500 border-blue-500' \n                      : 'border-gray-300'\n                  }`}>\n                    {selectedService === service && (\n                      <CheckCircle className=\"w-4 h-4 text-white\" />\n                    )}\n                  </div>\n                  <div>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Truck className=\"h-5 w-5 text-blue-600\" />\n                      {service.service_name}\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {service.carrier}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    ${service.total.toFixed(2)}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">CAD</div>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"pt-0\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4 text-gray-400\" />\n                  <span>\n                    {service.delivery_days \n                      ? `${service.delivery_days} business days`\n                      : 'Standard delivery'\n                    }\n                  </span>\n                </div>\n                <Badge variant=\"secondary\">\n                  <Package className=\"h-3 w-3 mr-1\" />\n                  Tracked\n                </Badge>\n              </div>\n\n              {selectedService === service && (\n                <div className=\"mt-4 pt-4 border-t space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Service:</span>\n                    <span className=\"font-medium\">{service.service_name}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Carrier:</span>\n                    <span className=\"font-medium\">{service.carrier}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Delivery Time:</span>\n                    <span className=\"font-medium\">{service.delivery_days} business days</span>\n                  </div>\n                  <Separator />\n                  <div className=\"flex justify-between font-semibold\">\n                    <span>Total Price (All-Inclusive):</span>\n                    <span>${service.total.toFixed(2)} CAD</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    * Includes pickup, delivery, insurance, and taxes\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"flex justify-center pt-6\">\n        <Button\n          onClick={handleConfirmOrder}\n          disabled={!selectedService || isSubmitting}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 text-lg font-semibold\"\n          data-testid=\"button-confirm-order\"\n        >\n          {isSubmitting ? (\n            <>\n              <div className=\"animate-spin mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full\"></div>\n              Processing Order...\n            </>\n          ) : (\n            'Confirm & Submit Order'\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":8138},"client/src/components/steps/step-recipient.tsx":{"content":"import { UseFormReturn } from \"react-hook-form\";\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Copy } from \"lucide-react\";\nimport { MultiStepForm } from \"@shared/schema\";\n\ninterface StepRecipientProps {\n  form: UseFormReturn<MultiStepForm>;\n  copyFromSender: () => void;\n}\n\nconst STATES_US = [\n  { value: \"AL\", label: \"Alabama\" }, { value: \"AK\", label: \"Alaska\" }, { value: \"AZ\", label: \"Arizona\" },\n  { value: \"AR\", label: \"Arkansas\" }, { value: \"CA\", label: \"California\" }, { value: \"CO\", label: \"Colorado\" },\n  { value: \"CT\", label: \"Connecticut\" }, { value: \"DE\", label: \"Delaware\" }, { value: \"FL\", label: \"Florida\" },\n  { value: \"GA\", label: \"Georgia\" }, { value: \"HI\", label: \"Hawaii\" }, { value: \"ID\", label: \"Idaho\" },\n  { value: \"IL\", label: \"Illinois\" }, { value: \"IN\", label: \"Indiana\" }, { value: \"IA\", label: \"Iowa\" },\n  { value: \"KS\", label: \"Kansas\" }, { value: \"KY\", label: \"Kentucky\" }, { value: \"LA\", label: \"Louisiana\" },\n  { value: \"ME\", label: \"Maine\" }, { value: \"MD\", label: \"Maryland\" }, { value: \"MA\", label: \"Massachusetts\" },\n  { value: \"MI\", label: \"Michigan\" }, { value: \"MN\", label: \"Minnesota\" }, { value: \"MS\", label: \"Mississippi\" },\n  { value: \"MO\", label: \"Missouri\" }, { value: \"MT\", label: \"Montana\" }, { value: \"NE\", label: \"Nebraska\" },\n  { value: \"NV\", label: \"Nevada\" }, { value: \"NH\", label: \"New Hampshire\" }, { value: \"NJ\", label: \"New Jersey\" },\n  { value: \"NM\", label: \"New Mexico\" }, { value: \"NY\", label: \"New York\" }, { value: \"NC\", label: \"North Carolina\" },\n  { value: \"ND\", label: \"North Dakota\" }, { value: \"OH\", label: \"Ohio\" }, { value: \"OK\", label: \"Oklahoma\" },\n  { value: \"OR\", label: \"Oregon\" }, { value: \"PA\", label: \"Pennsylvania\" }, { value: \"RI\", label: \"Rhode Island\" },\n  { value: \"SC\", label: \"South Carolina\" }, { value: \"SD\", label: \"South Dakota\" }, { value: \"TN\", label: \"Tennessee\" },\n  { value: \"TX\", label: \"Texas\" }, { value: \"UT\", label: \"Utah\" }, { value: \"VT\", label: \"Vermont\" },\n  { value: \"VA\", label: \"Virginia\" }, { value: \"WA\", label: \"Washington\" }, { value: \"WV\", label: \"West Virginia\" },\n  { value: \"WI\", label: \"Wisconsin\" }, { value: \"WY\", label: \"Wyoming\" }\n];\n\nconst PROVINCES_CA = [\n  { value: \"AB\", label: \"Alberta\" }, { value: \"BC\", label: \"British Columbia\" }, { value: \"MB\", label: \"Manitoba\" },\n  { value: \"NB\", label: \"New Brunswick\" }, { value: \"NL\", label: \"Newfoundland and Labrador\" }, { value: \"NS\", label: \"Nova Scotia\" },\n  { value: \"NT\", label: \"Northwest Territories\" }, { value: \"NU\", label: \"Nunavut\" }, { value: \"ON\", label: \"Ontario\" },\n  { value: \"PE\", label: \"Prince Edward Island\" }, { value: \"QC\", label: \"Quebec\" }, { value: \"SK\", label: \"Saskatchewan\" }, { value: \"YT\", label: \"Yukon\" }\n];\n\nexport default function StepRecipient({ form, copyFromSender }: StepRecipientProps) {\n  const recipientCountry = form.watch('recipient.country');\n  const provinces = recipientCountry === 'CA' ? PROVINCES_CA : STATES_US;\n  const provinceLabel = recipientCountry === 'CA' ? 'Province' : 'State';\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-end\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={copyFromSender}\n          data-testid=\"button-copy-sender\"\n        >\n          <Copy className=\"mr-2 h-4 w-4\" />\n          Copy from Sender\n        </Button>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"recipient.fullName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Full Name *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Jane Smith\" {...field} data-testid=\"input-recipient-name\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"recipient.company\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Company (Optional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Company Ltd.\" {...field} data-testid=\"input-recipient-company\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"recipient.phone\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Phone *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"(555) 123-4567\" {...field} data-testid=\"input-recipient-phone\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"recipient.email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email *</FormLabel>\n              <FormControl>\n                <Input type=\"email\" placeholder=\"jane@example.com\" {...field} data-testid=\"input-recipient-email\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <FormField\n        control={form.control}\n        name=\"recipient.address1\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Address Line 1 *</FormLabel>\n            <FormControl>\n              <Input placeholder=\"456 Oak Avenue\" {...field} data-testid=\"input-recipient-address1\" />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"recipient.address2\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Address Line 2 (Optional)</FormLabel>\n            <FormControl>\n              <Input placeholder=\"Apt, Suite, Unit, etc.\" {...field} data-testid=\"input-recipient-address2\" />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <div className=\"grid md:grid-cols-3 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"recipient.city\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>City *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"New York\" {...field} data-testid=\"input-recipient-city\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"recipient.province\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{provinceLabel} *</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-recipient-province\">\n                    <SelectValue placeholder={`Select ${provinceLabel}`} />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {provinces.map((province) => (\n                    <SelectItem key={province.value} value={province.value}>\n                      {province.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"recipient.postalCode\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{recipientCountry === 'CA' ? 'Postal Code' : 'Zip Code'} *</FormLabel>\n              <FormControl>\n                <Input placeholder={recipientCountry === 'CA' ? 'M5V 3A8' : '10001'} {...field} data-testid=\"input-recipient-postal\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <FormField\n        control={form.control}\n        name=\"recipient.country\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Country *</FormLabel>\n            <Select onValueChange={field.onChange} defaultValue={field.value}>\n              <FormControl>\n                <SelectTrigger data-testid=\"select-recipient-country\">\n                  <SelectValue placeholder=\"Select Country\" />\n                </SelectTrigger>\n              </FormControl>\n              <SelectContent>\n                <SelectItem value=\"CA\">Canada</SelectItem>\n                <SelectItem value=\"US\">United States</SelectItem>\n              </SelectContent>\n            </Select>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n    </div>\n  );\n}","size_bytes":9018},"client/src/components/steps/step-sender.tsx":{"content":"import { UseFormReturn } from \"react-hook-form\";\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MultiStepForm } from \"@shared/schema\";\n\ninterface StepSenderProps {\n  form: UseFormReturn<MultiStepForm>;\n}\n\nconst PROVINCES_CA = [\n  { value: \"AB\", label: \"Alberta\" },\n  { value: \"BC\", label: \"British Columbia\" },\n  { value: \"MB\", label: \"Manitoba\" },\n  { value: \"NB\", label: \"New Brunswick\" },\n  { value: \"NL\", label: \"Newfoundland and Labrador\" },\n  { value: \"NS\", label: \"Nova Scotia\" },\n  { value: \"NT\", label: \"Northwest Territories\" },\n  { value: \"NU\", label: \"Nunavut\" },\n  { value: \"ON\", label: \"Ontario\" },\n  { value: \"PE\", label: \"Prince Edward Island\" },\n  { value: \"QC\", label: \"Quebec\" },\n  { value: \"SK\", label: \"Saskatchewan\" },\n  { value: \"YT\", label: \"Yukon\" }\n];\n\nexport default function StepSender({ form }: StepSenderProps) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"sender.fullName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Full Name *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"John Doe\" {...field} data-testid=\"input-sender-name\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"sender.company\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Company (Optional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Acme Inc.\" {...field} data-testid=\"input-sender-company\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"sender.phone\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Phone *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"(416) 555-0123\" {...field} data-testid=\"input-sender-phone\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"sender.email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email *</FormLabel>\n              <FormControl>\n                <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-sender-email\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <FormField\n        control={form.control}\n        name=\"sender.address1\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Address Line 1 *</FormLabel>\n            <FormControl>\n              <Input placeholder=\"123 Main Street\" {...field} data-testid=\"input-sender-address1\" />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"sender.address2\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Address Line 2 (Optional)</FormLabel>\n            <FormControl>\n              <Input placeholder=\"Apt, Suite, Unit, etc.\" {...field} data-testid=\"input-sender-address2\" />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <div className=\"grid md:grid-cols-3 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"sender.city\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>City *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Toronto\" {...field} data-testid=\"input-sender-city\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"sender.province\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Province *</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-sender-province\">\n                    <SelectValue placeholder=\"Select Province\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {PROVINCES_CA.map((province) => (\n                    <SelectItem key={province.value} value={province.value}>\n                      {province.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"sender.postalCode\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Postal Code *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"M5V 3A8\" {...field} data-testid=\"input-sender-postal\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <FormField\n        control={form.control}\n        name=\"sender.country\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Country *</FormLabel>\n            <Select onValueChange={field.onChange} defaultValue={field.value}>\n              <FormControl>\n                <SelectTrigger data-testid=\"select-sender-country\">\n                  <SelectValue placeholder=\"Select Country\" />\n                </SelectTrigger>\n              </FormControl>\n              <SelectContent>\n                <SelectItem value=\"CA\">Canada</SelectItem>\n                <SelectItem value=\"US\">United States</SelectItem>\n              </SelectContent>\n            </Select>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n    </div>\n  );\n}","size_bytes":6330},"client/src/pages/success.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle, Download, Mail, Package, Truck } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport logoPath from \"@assets/Topping-Courier-PNG_070319_1756363417572.png\";\n\nexport default function Success() {\n  const [match, params] = useRoute('/success/:orderId');\n  const [countdown, setCountdown] = useState(10);\n\n  const { data: order, isLoading } = useQuery({\n    queryKey: ['/api/order', params?.orderId],\n    enabled: !!params?.orderId\n  });\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCountdown((prev) => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          window.location.href = '/';\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const downloadInvoice = () => {\n    if (order?.id) {\n      window.open(`/api/order/${order.id}/pdf`, '_blank');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"animate-pulse text-center\">\n          <div className=\"h-8 bg-gray-200 rounded w-64 mx-auto mb-4\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-48 mx-auto\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!match || !order) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <Card className=\"max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-red-600\">Order Not Found</CardTitle>\n            <CardDescription>\n              The order you're looking for could not be found.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <Button onClick={() => window.location.href = '/'}>\n              Back to Home\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 py-12\">\n      <div className=\"max-w-2xl mx-auto px-4\">\n        {/* Company Logo Header */}\n        <motion.div \n          className=\"text-center mb-8\"\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.6, ease: \"easeOut\" }}\n        >\n          <motion.img \n            src={logoPath} \n            alt=\"Topping Courier Inc.\" \n            className=\"mx-auto mb-4 h-16 object-contain\"\n            initial={{ y: -20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.2, duration: 0.5 }}\n            whileHover={{ scale: 1.05 }}\n          />\n          <motion.h2 \n            className=\"text-xl font-semibold text-gray-800\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.4, duration: 0.5 }}\n          >\n            Topping Courier Inc.\n          </motion.h2>\n          <motion.p \n            className=\"text-orange-600 font-medium\"\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.6, duration: 0.4 }}\n          >\n            Topping Express\n          </motion.p>\n        </motion.div>\n\n        {/* Success Header */}\n        <Card className=\"mb-8 bg-gradient-to-r from-green-50 to-blue-50 border-green-200\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <CardTitle className=\"text-2xl text-green-800\">\n              ✅ Order Confirmed Successfully!\n            </CardTitle>\n            <CardDescription className=\"text-lg text-green-700\">\n              Thank you {order.sender.fullName}! Your shipping order has been created and processed.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n\n        {/* Order Details */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5\" />\n              Order Details\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n              <div>\n                <p className=\"font-semibold\">Order Number:</p>\n                <p className=\"text-blue-600 font-mono\">{order.orderNumber}</p>\n              </div>\n              <div>\n                <p className=\"font-semibold\">Tracking Number:</p>\n                <p className=\"text-blue-600 font-mono\">{order.trackingNumber}</p>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div>\n              <h4 className=\"font-semibold mb-2\">📦 Shipping Service:</h4>\n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">{order.selectedService.service_name}</p>\n                    <p className=\"text-sm text-gray-600\">{order.selectedService.carrier}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      {order.selectedService.delivery_days} business days\n                    </p>\n                  </div>\n                  <Badge className=\"bg-blue-100 text-blue-800\">\n                    ${order.selectedService.total.toFixed(2)} CAD\n                  </Badge>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">📤 From:</h4>\n                <div className=\"text-sm text-gray-600\">\n                  <p>{order.sender.fullName}</p>\n                  {order.sender.company && <p>{order.sender.company}</p>}\n                  <p>{order.sender.address1}</p>\n                  {order.sender.address2 && <p>{order.sender.address2}</p>}\n                  <p>{order.sender.city}, {order.sender.province} {order.sender.postalCode}</p>\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-2\">📥 To:</h4>\n                <div className=\"text-sm text-gray-600\">\n                  <p>{order.recipient.fullName}</p>\n                  {order.recipient.company && <p>{order.recipient.company}</p>}\n                  <p>{order.recipient.address1}</p>\n                  {order.recipient.address2 && <p>{order.recipient.address2}</p>}\n                  <p>{order.recipient.city}, {order.recipient.province} {order.recipient.postalCode}</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Email Notification */}\n        <Card className=\"mb-6 bg-blue-50 border-blue-200\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-3\">\n              <Mail className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <p className=\"font-semibold text-blue-900\">\n                  📧 Confirmation emails sent!\n                </p>\n                <p className=\"text-sm text-blue-700\">\n                  We have sent you an email with your invoice and tracking number to{' '}\n                  <span className=\"font-semibold\">{order.recipient.email}</span>\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button\n            onClick={downloadInvoice}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n            data-testid=\"button-download-invoice\"\n          >\n            <Download className=\"mr-2 h-4 w-4\" />\n            Download Invoice PDF\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            onClick={() => window.location.href = '/'}\n            data-testid=\"button-new-order\"\n          >\n            <Truck className=\"mr-2 h-4 w-4\" />\n            Create New Order\n          </Button>\n        </div>\n\n        {/* Auto-redirect notice */}\n        <div className=\"text-center mt-8\">\n          <p className=\"text-sm text-gray-600\">\n            You will be automatically redirected to the home page in{' '}\n            <span className=\"font-bold text-blue-600\">{countdown}</span> seconds.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8967},"server/email.ts":{"content":"import axios from 'axios';\n\nconst POSTMARK_SERVER_TOKEN = process.env.POSTMARK_SERVER_TOKEN;\n\n// Initialize Postmark\nif (POSTMARK_SERVER_TOKEN) {\n  console.log('✅ Postmark initialized for direct API email delivery!');\n} else {\n  console.warn('⚠️  Postmark token not available');\n}\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n  attachments?: Array<{\n    content: string;\n    filename: string;\n    type: string;\n    disposition: string;\n  }>;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  // Use direct Postmark API for all emails\n  if (POSTMARK_SERVER_TOKEN) {\n    try {\n      const attachments = params.attachments?.map(att => ({\n        Name: att.filename,\n        Content: att.content,\n        ContentType: att.type,\n        ContentID: null\n      }));\n\n      const postmarkData = {\n        From: params.from,\n        To: params.to,\n        Subject: params.subject,\n        TextBody: params.text || '',\n        HtmlBody: params.html || '',\n        MessageStream: \"outbound\",\n        ...(attachments && attachments.length > 0 && { Attachments: attachments })\n      };\n\n      const response = await axios.post(\n        \"https://api.postmarkapp.com/email\",\n        postmarkData,\n        {\n          headers: {\n            \"X-Postmark-Server-Token\": POSTMARK_SERVER_TOKEN,\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      );\n      \n      console.log(`✅ Email sent successfully to ${params.to} via Postmark Direct API!`);\n      console.log(`Message ID: ${response.data.MessageID}`);\n      return true;\n    } catch (error: any) {\n      console.error(`❌ Postmark Direct API error for ${params.to}:`, error.response?.data || error.message);\n      return false;\n    }\n  }\n  \n  // If no Postmark token, simulate\n  console.log('📧 [SIMULATED EMAIL - No API Token]');\n  console.log(`   To: ${params.to}`);\n  console.log(`   From: ${params.from}`);\n  console.log(`   Subject: ${params.subject}`);\n  console.log(`   Has HTML: ${!!params.html}`);\n  console.log(`   Has Attachments: ${!!params.attachments?.length}`);\n  console.log('   ✅ Email simulated successfully (add POSTMARK_SERVER_TOKEN for real delivery)');\n  return true;\n}\n\n// New order email functions\nexport async function sendCustomerThankYouEmail(\n  customerEmail: string,\n  order: any,\n  pdfBuffer: Buffer\n): Promise<boolean> {\n  const subject = `Thank You! Your Order ${order.orderNumber} is Confirmed - Tracking: ${order.trackingNumber}`;\n\n  const htmlBody = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <div style=\"background-color: #2563eb; color: white; padding: 20px; text-align: center;\">\n        <h1 style=\"margin: 0;\">Topping Courier Inc.</h1>\n        <p style=\"margin: 5px 0 0 0;\">87 Windrow Street, Richmond Hill, ON | Tel: 647-339-0222</p>\n      </div>\n      \n      <div style=\"padding: 30px 20px; background-color: #f8fafc;\">\n        <div style=\"background-color: #10b981; color: white; padding: 15px; border-radius: 8px; text-align: center; margin-bottom: 20px;\">\n          <h2 style=\"margin: 0;\">✅ Thank You, ${order.recipient.fullName}!</h2>\n          <p style=\"margin: 10px 0 0 0;\">Your shipping order is confirmed and ready for pickup.</p>\n        </div>\n\n        <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n          <h3 style=\"color: #1e293b; margin-top: 0;\">📋 Order Details:</h3>\n          <p style=\"margin: 5px 0;\"><strong>Order Number:</strong> ${order.orderNumber}</p>\n          <p style=\"margin: 5px 0;\"><strong>Tracking Number:</strong> ${order.trackingNumber}</p>\n          <p style=\"margin: 5px 0;\"><strong>Service:</strong> ${order.selectedService.service_name}</p>\n          <p style=\"margin: 5px 0;\"><strong>Carrier:</strong> ${order.selectedService.carrier}</p>\n          <p style=\"margin: 5px 0;\"><strong>Total Amount:</strong> $${order.selectedService.total.toFixed(2)} CAD</p>\n          <p style=\"margin: 5px 0;\"><strong>Delivery:</strong> ${order.selectedService.delivery_days} business days</p>\n        </div>\n\n        <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n          <h3 style=\"color: #1e293b; margin-top: 0;\">📦 Shipping Information:</h3>\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px;\">\n            <div>\n              <h4 style=\"color: #1e293b; margin: 10px 0 5px 0;\">📤 From:</h4>\n              <p style=\"margin: 0; font-size: 14px; color: #475569;\">\n                ${order.sender.fullName}<br>\n                ${order.sender.company ? order.sender.company + '<br>' : ''}\n                ${order.sender.address1}<br>\n                ${order.sender.address2 ? order.sender.address2 + '<br>' : ''}\n                ${order.sender.city}, ${order.sender.province} ${order.sender.postalCode}\n              </p>\n            </div>\n            <div>\n              <h4 style=\"color: #1e293b; margin: 10px 0 5px 0;\">📥 To:</h4>\n              <p style=\"margin: 0; font-size: 14px; color: #475569;\">\n                ${order.recipient.fullName}<br>\n                ${order.recipient.company ? order.recipient.company + '<br>' : ''}\n                ${order.recipient.address1}<br>\n                ${order.recipient.address2 ? order.recipient.address2 + '<br>' : ''}\n                ${order.recipient.city}, ${order.recipient.province} ${order.recipient.postalCode}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div style=\"background-color: #dbeafe; border: 1px solid #3b82f6; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n          <h4 style=\"color: #1e40af; margin-top: 0;\">📧 Next Steps:</h4>\n          <ul style=\"margin: 5px 0; color: #1e40af;\">\n            <li>Your invoice is attached to this email</li>\n            <li>You will receive pickup and delivery notifications</li>\n            <li>Track your package using: <strong>${order.trackingNumber}</strong></li>\n            <li>Contact us at 647-339-0222 for any questions</li>\n          </ul>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 30px;\">\n          <p style=\"color: #64748b; font-size: 14px;\">\n            Best regards,<br>\n            <strong>Ali Topping</strong><br>\n            <strong>Topping Courier Inc.</strong><br>\n            87 Windrow Street, Richmond Hill, ON<br>\n            Tel: 647-339-0222<br>\n            Email: info@toppingcourier.ca\n          </p>\n        </div>\n      </div>\n    </div>\n  `;\n\n  const pdfAttachment = {\n    content: pdfBuffer.toString('base64'),\n    filename: `invoice-${order.orderNumber}.pdf`,\n    type: 'application/pdf',\n    disposition: 'attachment'\n  };\n\n  return await sendEmail({\n    to: customerEmail,\n    from: 'info@toppingcourier.ca',\n    subject,\n    html: htmlBody,\n    attachments: [pdfAttachment]\n  });\n}\n\nexport async function sendAdminNotificationEmail(\n  adminEmail: string,\n  order: any,\n  pdfBuffer: Buffer\n): Promise<boolean> {\n  const subject = `New Order ${order.orderNumber} - ${order.recipient.fullName}`;\n\n  const htmlBody = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <div style=\"background-color: #2563eb; color: white; padding: 20px; text-align: center;\">\n        <h1 style=\"margin: 0;\">New Order Notification</h1>\n        <p style=\"margin: 5px 0 0 0;\">Topping Courier Inc.</p>\n      </div>\n      \n      <div style=\"padding: 30px 20px; background-color: #f8fafc;\">\n        <div style=\"background-color: #f59e0b; color: white; padding: 15px; border-radius: 8px; text-align: center; margin-bottom: 20px;\">\n          <h2 style=\"margin: 0;\">📦 New Order Received</h2>\n          <p style=\"margin: 10px 0 0 0;\">Order ${order.orderNumber} from ${order.recipient.fullName}</p>\n        </div>\n\n        <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n          <h3 style=\"color: #1e293b; margin-top: 0;\">📋 Order Summary:</h3>\n          <p style=\"margin: 5px 0;\"><strong>Order ID:</strong> ${order.id}</p>\n          <p style=\"margin: 5px 0;\"><strong>Order Number:</strong> ${order.orderNumber}</p>\n          <p style=\"margin: 5px 0;\"><strong>Date:</strong> ${order.date}</p>\n          <p style=\"margin: 5px 0;\"><strong>Tracking:</strong> ${order.trackingNumber}</p>\n          <p style=\"margin: 5px 0;\"><strong>Total:</strong> $${order.selectedService.total.toFixed(2)} CAD</p>\n        </div>\n\n        <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n          <h3 style=\"color: #1e293b; margin-top: 0;\">👤 Customer Information:</h3>\n          <p style=\"margin: 5px 0;\"><strong>Name:</strong> ${order.recipient.fullName}</p>\n          <p style=\"margin: 5px 0;\"><strong>Email:</strong> ${order.recipient.email}</p>\n          <p style=\"margin: 5px 0;\"><strong>Phone:</strong> ${order.recipient.phone}</p>\n          ${order.recipient.company ? `<p style=\"margin: 5px 0;\"><strong>Company:</strong> ${order.recipient.company}</p>` : ''}\n        </div>\n\n        <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n          <h3 style=\"color: #1e293b; margin-top: 0;\">🚚 Service Details:</h3>\n          <p style=\"margin: 5px 0;\"><strong>Service:</strong> ${order.selectedService.service_name}</p>\n          <p style=\"margin: 5px 0;\"><strong>Carrier:</strong> ${order.selectedService.carrier}</p>\n          <p style=\"margin: 5px 0;\"><strong>Delivery:</strong> ${order.selectedService.delivery_days} business days</p>\n          <p style=\"margin: 5px 0;\"><strong>Base Rate:</strong> $${order.selectedService.base.toFixed(2)}</p>\n          <p style=\"margin: 5px 0;\"><strong>Markup:</strong> $${order.selectedService.markup.toFixed(2)}</p>\n          <p style=\"margin: 5px 0;\"><strong>Tax:</strong> $${order.selectedService.tax.toFixed(2)}</p>\n        </div>\n\n        <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n          <h3 style=\"color: #1e293b; margin-top: 0;\">📦 Package Details:</h3>\n          <p style=\"margin: 5px 0;\"><strong>Dimensions:</strong> ${order.package.length} x ${order.package.width} x ${order.package.height} cm</p>\n          <p style=\"margin: 5px 0;\"><strong>Weight:</strong> ${order.package.weight} kg</p>\n          <p style=\"margin: 5px 0;\"><strong>Value:</strong> $${order.package.value} CAD</p>\n        </div>\n\n        <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n          <h3 style=\"color: #1e293b; margin-top: 0;\">📍 Addresses:</h3>\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px;\">\n            <div>\n              <h4 style=\"color: #1e293b; margin: 10px 0 5px 0;\">From:</h4>\n              <p style=\"margin: 0; font-size: 14px; color: #475569;\">\n                ${order.sender.fullName}<br>\n                ${order.sender.company ? order.sender.company + '<br>' : ''}\n                ${order.sender.address1}<br>\n                ${order.sender.address2 ? order.sender.address2 + '<br>' : ''}\n                ${order.sender.city}, ${order.sender.province} ${order.sender.postalCode}<br>\n                ${order.sender.phone}\n              </p>\n            </div>\n            <div>\n              <h4 style=\"color: #1e293b; margin: 10px 0 5px 0;\">To:</h4>\n              <p style=\"margin: 0; font-size: 14px; color: #475569;\">\n                ${order.recipient.fullName}<br>\n                ${order.recipient.company ? order.recipient.company + '<br>' : ''}\n                ${order.recipient.address1}<br>\n                ${order.recipient.address2 ? order.recipient.address2 + '<br>' : ''}\n                ${order.recipient.city}, ${order.recipient.province} ${order.recipient.postalCode}<br>\n                ${order.recipient.phone}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n\n  const pdfAttachment = {\n    content: pdfBuffer.toString('base64'),\n    filename: `invoice-${order.orderNumber}.pdf`,\n    type: 'application/pdf',\n    disposition: 'attachment'\n  };\n\n  return await sendEmail({\n    to: adminEmail,\n    from: 'info@toppingcourier.ca',\n    subject,\n    html: htmlBody,\n    attachments: [pdfAttachment]\n  });\n}\n\n// Legacy invoice email function\nexport async function sendInvoiceEmail(\n  customerEmail: string,\n  companyEmail: string,\n  invoiceData: any,\n  pdfBuffer: Buffer\n): Promise<boolean> {\n  const invoiceNumber = invoiceData.number;\n  const customerName = invoiceData.customerInfo.name;\n  const totalAmount = invoiceData.selectedService.total.toFixed(2);\n  const trackingNumber = invoiceData.provisionalTracking;\n\n  // Create PDF attachment\n  const pdfAttachment = {\n    content: pdfBuffer.toString('base64'),\n    filename: `invoice-${invoiceNumber}.pdf`,\n    type: 'application/pdf',\n    disposition: 'attachment'\n  };\n\n  // Email to customer\n  const customerEmailHTML = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <div style=\"background-color: #2563eb; color: white; padding: 20px; text-align: center;\">\n        <h1 style=\"margin: 0;\">Topping Express</h1>\n        <p style=\"margin: 5px 0 0 0;\">Your Invoice is Ready</p>\n      </div>\n      \n      <div style=\"padding: 30px 20px; background-color: #f8fafc;\">\n        <h2 style=\"color: #1e293b; margin-bottom: 20px;\">Dear ${customerName},</h2>\n        \n        <p style=\"color: #475569; line-height: 1.6;\">\n          Thank you for choosing Topping Express for your shipping needs. Your invoice has been generated and is attached to this email.\n        </p>\n        \n        <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n          <h3 style=\"color: #1e293b; margin-top: 0;\">Invoice Details:</h3>\n          <p style=\"margin: 5px 0;\"><strong>Invoice Number:</strong> ${invoiceNumber}</p>\n          <p style=\"margin: 5px 0;\"><strong>Total Amount:</strong> $${totalAmount} CAD</p>\n          <p style=\"margin: 5px 0;\"><strong>Service:</strong> ${invoiceData.selectedService.service_name}</p>\n          <p style=\"margin: 5px 0;\"><strong>Carrier:</strong> ${invoiceData.selectedService.carrier}</p>\n        </div>\n        \n        <div style=\"background-color: #f1f5f9; border: 1px solid #cbd5e1; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n          <h4 style=\"color: #1e293b; margin-top: 0;\">📍 Shipping Information</h4>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>From:</strong> ${invoiceData.origin?.city || 'N/A'}, ${invoiceData.origin?.province || ''} ${invoiceData.origin?.postal_code || ''}</p>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>To:</strong> ${invoiceData.destination?.city || 'N/A'}, ${invoiceData.destination?.province || ''} ${invoiceData.destination?.postal_code || ''}</p>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>Package:</strong> ${invoiceData.package?.length || 'N/A'} x ${invoiceData.package?.width || 'N/A'} x ${invoiceData.package?.height || 'N/A'} cm, ${invoiceData.package?.weight || 'N/A'} kg</p>\n        </div>\n        \n        <div style=\"background-color: #dbeafe; border: 1px solid #3b82f6; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n          <h4 style=\"color: #1e40af; margin-top: 0;\">📦 Tracking Information</h4>\n          <p style=\"margin: 5px 0; color: #1e40af;\"><strong>Provisional Tracking Number:</strong></p>\n          <p style=\"font-family: monospace; font-size: 18px; color: #1e40af; font-weight: bold; margin: 5px 0;\">${trackingNumber}</p>\n          <p style=\"color: #1e40af; font-size: 14px; margin: 5px 0;\">* Final tracking number will be provided upon shipment processing</p>\n        </div>\n        \n        <p style=\"color: #475569; line-height: 1.6;\">\n          Please keep this email and tracking number for your records. You can contact us at 647-339-0222 if you have any questions.\n        </p>\n        \n        <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n          <h4 style=\"color: #1e293b; margin-top: 0;\">📤 Sender Information:</h4>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>Name:</strong> Ali Topping</p>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>Company:</strong> Topping Courier Inc.</p>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>Address:</strong> 87 Windrow Street</p>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>Phone:</strong> 647-339-0222</p>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>Email:</strong> info@toppingcourier.ca</p>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 30px;\">\n          <p style=\"color: #64748b; font-size: 14px;\">\n            Best regards,<br>\n            <strong>Ali Topping</strong><br>\n            <strong>Topping Courier Inc.</strong><br>\n            87 Windrow Street<br>\n            Tel: 647-339-0222<br>\n            Email: info@toppingcourier.ca<br>\n            Website: www.toppingcourier.ca\n          </p>\n        </div>\n      </div>\n    </div>\n  `;\n\n  // Email to company\n  const companyEmailHTML = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <div style=\"background-color: #dc2626; color: white; padding: 20px; text-align: center;\">\n        <h1 style=\"margin: 0;\">New Invoice Generated</h1>\n        <p style=\"margin: 5px 0 0 0;\">Topping Express - Internal Notification</p>\n      </div>\n      \n      <div style=\"padding: 30px 20px; background-color: #f8fafc;\">\n        <h2 style=\"color: #1e293b; margin-bottom: 20px;\">Invoice Notification</h2>\n        \n        <p style=\"color: #475569; line-height: 1.6;\">\n          A new invoice has been generated for customer: <strong>${customerName}</strong>\n        </p>\n        \n        <div style=\"background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n          <h3 style=\"color: #1e293b; margin-top: 0;\">📋 Invoice Details:</h3>\n          <p style=\"margin: 5px 0;\"><strong>Invoice:</strong> ${invoiceNumber}</p>\n          <p style=\"margin: 5px 0;\"><strong>Customer:</strong> ${customerName}</p>\n          <p style=\"margin: 5px 0;\"><strong>Email:</strong> ${customerEmail}</p>\n          <p style=\"margin: 5px 0;\"><strong>Phone:</strong> ${invoiceData.customerInfo.phone || 'N/A'}</p>\n          <p style=\"margin: 5px 0;\"><strong>Company:</strong> ${invoiceData.customerInfo.company || 'N/A'}</p>\n          <p style=\"margin: 5px 0;\"><strong>Total:</strong> $${totalAmount} CAD</p>\n          <p style=\"margin: 5px 0;\"><strong>Service:</strong> ${invoiceData.selectedService.service_name}</p>\n          <p style=\"margin: 5px 0;\"><strong>Tracking:</strong> ${trackingNumber}</p>\n        </div>\n        \n        <div style=\"background-color: #f1f5f9; border: 1px solid #cbd5e1; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n          <h4 style=\"color: #1e293b; margin-top: 0;\">📦 Shipment Details:</h4>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>From:</strong> ${invoiceData.origin?.city || 'N/A'}, ${invoiceData.origin?.province || ''}</p>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>To:</strong> ${invoiceData.destination?.city || 'N/A'}, ${invoiceData.destination?.province || ''}</p>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>Package:</strong> ${invoiceData.package?.weight || 'N/A'} kg, ${invoiceData.package?.length || 'N/A'}x${invoiceData.package?.width || 'N/A'}x${invoiceData.package?.height || 'N/A'} cm</p>\n          <p style=\"margin: 5px 0; color: #475569;\"><strong>Carrier:</strong> ${invoiceData.selectedService.carrier}</p>\n        </div>\n        \n        <p style=\"color: #475569; line-height: 1.6;\">\n          The invoice has been automatically sent to the customer at ${customerEmail}.\n        </p>\n        \n        <div style=\"text-align: center; margin-top: 30px;\">\n          <p style=\"color: #64748b; font-size: 14px;\">\n            <strong>Topping Courier Inc.</strong><br>\n            87 Windrow Street<br>\n            Tel: 647-339-0222<br>\n            Email: info@toppingcourier.ca\n          </p>\n        </div>\n      </div>\n    </div>\n  `;\n\n  try {\n    // Send email to customer\n    const customerEmailSent = await sendEmail({\n      to: customerEmail,\n      from: 'info@toppingcourier.ca',\n      subject: `Invoice ${invoiceNumber} - Topping Courier`,\n      html: customerEmailHTML,\n      attachments: [pdfAttachment]\n    });\n\n    // Send notification to company\n    const companyEmailSent = await sendEmail({\n      to: companyEmail,\n      from: 'info@toppingcourier.ca',\n      subject: `New Invoice Generated: ${invoiceNumber}`,\n      html: companyEmailHTML,\n      attachments: [pdfAttachment]\n    });\n\n    return customerEmailSent && companyEmailSent;\n  } catch (error) {\n    console.error('Failed to send invoice emails:', error);\n    return false;\n  }\n}","size_bytes":21159},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mail, Phone, Calendar, User, MessageSquare, CheckCircle, Eye } from \"lucide-react\";\nimport logoPath from \"@assets/Topping-Courier-PNG_070319_1756363417572.png\";\n\ninterface ContactMessage {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  subject: string;\n  message: string;\n  submittedAt: string;\n  status: string;\n  read: boolean;\n}\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch all contact messages\n  const { data: messages, isLoading } = useQuery<ContactMessage[]>({\n    queryKey: ['/api/admin/contact-messages'],\n    queryFn: () => fetch('/api/admin/contact-messages').then(res => res.json())\n  });\n\n  // Mark message as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: (messageId: string) => \n      fetch(`/api/admin/contact-messages/${messageId}/read`, { method: 'PATCH' }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/contact-messages'] });\n      toast({\n        title: \"Message Marked as Read\",\n        description: \"The message status has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to mark message as read.\",\n      });\n    }\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const unreadCount = messages?.filter(m => !m.read).length || 0;\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center space-x-3\">\n                <img \n                  src={logoPath} \n                  alt=\"Topping Express\" \n                  className=\"h-14 w-auto object-contain\"\n                />\n                <div>\n                  <h1 className=\"text-xl font-bold text-blue-600\">Topping Express</h1>\n                  <p className=\"text-xs text-gray-500\">Admin Panel</p>\n                </div>\n              </div>\n            </div>\n            <nav className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-8\">\n                <a href=\"/\" className=\"text-gray-600 hover:text-blue-600 px-3 py-2 text-sm font-medium\">Get Quote</a>\n                <a href=\"/track\" className=\"text-gray-600 hover:text-blue-600 px-3 py-2 text-sm font-medium\">Track Package</a>\n                <a href=\"/contact\" className=\"text-gray-600 hover:text-blue-600 px-3 py-2 text-sm font-medium\">Contact</a>\n                <a href=\"/admin\" className=\"text-blue-600 font-semibold px-3 py-2 text-sm\">Admin</a>\n              </div>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Contact Messages</h1>\n              <p className=\"text-lg text-gray-600\">Manage customer inquiries and support requests</p>\n            </div>\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"text-lg px-3 py-1\">\n                {unreadCount} new\n              </Badge>\n            )}\n          </div>\n\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-full mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : messages && messages.length > 0 ? (\n            <div className=\"space-y-6\">\n              {messages.map((message, index) => (\n                <motion.div\n                  key={message.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1, duration: 0.5 }}\n                >\n                  <Card className={`transition-all duration-200 ${!message.read ? 'border-blue-200 bg-blue-50/50' : ''}`}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <User className=\"w-5 h-5 text-blue-600\" />\n                            {message.name}\n                            {!message.read && (\n                              <Badge variant=\"secondary\">New</Badge>\n                            )}\n                          </CardTitle>\n                          <CardDescription className=\"mt-2\">\n                            <div className=\"flex flex-wrap gap-4 text-sm\">\n                              <span className=\"flex items-center gap-1\">\n                                <Mail className=\"w-4 h-4\" />\n                                {message.email}\n                              </span>\n                              {message.phone && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Phone className=\"w-4 h-4\" />\n                                  {message.phone}\n                                </span>\n                              )}\n                              <span className=\"flex items-center gap-1\">\n                                <Calendar className=\"w-4 h-4\" />\n                                {formatDate(message.submittedAt)}\n                              </span>\n                            </div>\n                          </CardDescription>\n                        </div>\n                        {!message.read && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => markAsReadMutation.mutate(message.id)}\n                            disabled={markAsReadMutation.isPending}\n                            data-testid={`button-mark-read-${message.id}`}\n                          >\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            Mark as Read\n                          </Button>\n                        )}\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      {message.subject && (\n                        <div className=\"mb-4\">\n                          <h4 className=\"font-semibold text-gray-900 mb-1\">Subject:</h4>\n                          <p className=\"text-gray-700\">{message.subject}</p>\n                        </div>\n                      )}\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 mb-2 flex items-center gap-2\">\n                          <MessageSquare className=\"w-4 h-4\" />\n                          Message:\n                        </h4>\n                        <div className=\"bg-gray-50 rounded-lg p-4 border-l-4 border-blue-500\">\n                          <p className=\"text-gray-700 whitespace-pre-wrap leading-relaxed\">\n                            {message.message}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <MessageSquare className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Messages Yet</h3>\n                <p className=\"text-gray-600\">Contact messages will appear here when customers reach out.</p>\n              </CardContent>\n            </Card>\n          )}\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":9105},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mail, Phone, MapPin, Clock, Send } from \"lucide-react\";\nimport logoPath from \"@assets/Topping-Courier-PNG_070319_1756363417572.png\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.message) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to send message');\n      }\n\n      toast({\n        title: \"Message Sent\",\n        description: \"Thank you for contacting us. We'll get back to you soon!\",\n      });\n\n      // Reset form\n      setFormData({\n        name: \"\",\n        email: \"\",\n        phone: \"\",\n        subject: \"\",\n        message: \"\"\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to send message. Please try again later.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center space-x-3\">\n                <img \n                  src={logoPath} \n                  alt=\"Topping Express\" \n                  className=\"h-14 w-auto object-contain\"\n                />\n                <div>\n                  <h1 className=\"text-xl font-bold text-blue-600\">Topping Express</h1>\n                  <p className=\"text-xs text-gray-500\">Express Shipping Solutions</p>\n                </div>\n              </div>\n            </div>\n            <nav className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-8\">\n                <a href=\"/\" className=\"text-gray-600 hover:text-blue-600 px-3 py-2 text-sm font-medium\">Get Quote</a>\n                <a href=\"/track\" className=\"text-gray-600 hover:text-blue-600 px-3 py-2 text-sm font-medium\">Track Package</a>\n                <a href=\"/contact\" className=\"text-blue-600 font-semibold px-3 py-2 text-sm\">Contact</a>\n              </div>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <div className=\"text-center mb-12\">\n            <motion.h1 \n              className=\"text-3xl font-bold text-gray-900 mb-4\"\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.2, duration: 0.6 }}\n            >\n              Contact Topping Express\n            </motion.h1>\n            <p className=\"text-lg text-gray-600\">\n              Get in touch with our team for any questions or support\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            {/* Contact Form */}\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n            >\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Mail className=\"w-5 h-5\" />\n                    Send us a Message\n                  </CardTitle>\n                  <CardDescription>\n                    We'll get back to you as soon as possible\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"name\">Full Name *</Label>\n                        <Input\n                          id=\"name\"\n                          name=\"name\"\n                          value={formData.name}\n                          onChange={handleInputChange}\n                          placeholder=\"Your full name\"\n                          required\n                          data-testid=\"input-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"email\">Email Address *</Label>\n                        <Input\n                          id=\"email\"\n                          name=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={handleInputChange}\n                          placeholder=\"your@email.com\"\n                          required\n                          data-testid=\"input-email\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"phone\">Phone Number</Label>\n                        <Input\n                          id=\"phone\"\n                          name=\"phone\"\n                          value={formData.phone}\n                          onChange={handleInputChange}\n                          placeholder=\"+1 (647) 339-0222\"\n                          data-testid=\"input-phone\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"subject\">Subject</Label>\n                        <Input\n                          id=\"subject\"\n                          name=\"subject\"\n                          value={formData.subject}\n                          onChange={handleInputChange}\n                          placeholder=\"How can we help?\"\n                          data-testid=\"input-subject\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"message\">Message *</Label>\n                      <Textarea\n                        id=\"message\"\n                        name=\"message\"\n                        value={formData.message}\n                        onChange={handleInputChange}\n                        placeholder=\"Tell us about your inquiry...\"\n                        rows={5}\n                        required\n                        data-testid=\"textarea-message\"\n                      />\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={isLoading}\n                      data-testid=\"button-send\"\n                    >\n                      {isLoading ? (\n                        <motion.div\n                          animate={{ rotate: 360 }}\n                          transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                        >\n                          <Send className=\"w-4 h-4 mr-2\" />\n                        </motion.div>\n                      ) : (\n                        <Send className=\"w-4 h-4 mr-2\" />\n                      )}\n                      Send Message\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Contact Information */}\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <Card>\n                <CardHeader>\n                  <CardTitle>Get in Touch</CardTitle>\n                  <CardDescription>\n                    Contact us through any of these channels\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <Phone className=\"w-5 h-5 text-blue-600 mt-1\" />\n                    <div>\n                      <h3 className=\"font-semibold\">Phone</h3>\n                      <p className=\"text-gray-600\">647-339-0222</p>\n                      <p className=\"text-sm text-gray-500\">Monday - Friday, 9 AM - 6 PM</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <Mail className=\"w-5 h-5 text-blue-600 mt-1\" />\n                    <div>\n                      <h3 className=\"font-semibold\">Email</h3>\n                      <p className=\"text-gray-600\">info@toppingcourier.ca</p>\n                      <p className=\"text-sm text-gray-500\">We respond within 24 hours</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <MapPin className=\"w-5 h-5 text-blue-600 mt-1\" />\n                    <div>\n                      <h3 className=\"font-semibold\">Address</h3>\n                      <p className=\"text-gray-600\">\n                        87 Windrow Street<br />\n                        Richmond Hill, ON<br />\n                        Canada\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <Clock className=\"w-5 h-5 text-blue-600 mt-1\" />\n                    <div>\n                      <h3 className=\"font-semibold\">Business Hours</h3>\n                      <p className=\"text-gray-600\">\n                        Monday - Friday: 9:00 AM - 6:00 PM<br />\n                        Saturday: 10:00 AM - 4:00 PM<br />\n                        Sunday: Closed\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Need Immediate Help?</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-600 mb-4\">\n                    For urgent shipping inquiries or time-sensitive packages, \n                    please call us directly at 647-339-0222.\n                  </p>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    Call Now\n                  </Button>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":11895},"client/src/pages/track-package.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Package, Search, Truck, Clock, CheckCircle, AlertCircle } from \"lucide-react\";\nimport logoPath from \"@assets/Topping-Courier-PNG_070319_1756363417572.png\";\n\nexport default function TrackPackage() {\n  const [trackingNumber, setTrackingNumber] = useState(\"\");\n  const [trackingData, setTrackingData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleTrack = async () => {\n    if (!trackingNumber.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Please enter a tracking number\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      // Call Stallion tracking API\n      const response = await fetch('/api/track', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ trackingNumber }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to track package');\n      }\n\n      const data = await response.json();\n      setTrackingData(data);\n      \n      toast({\n        title: \"Package Found\",\n        description: \"Tracking information loaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Package not found or tracking service unavailable\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'delivered':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'in_transit':\n        return <Truck className=\"w-5 h-5 text-blue-600\" />;\n      case 'pending':\n        return <Clock className=\"w-5 h-5 text-yellow-600\" />;\n      default:\n        return <AlertCircle className=\"w-5 h-5 text-gray-600\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center space-x-3\">\n                <img \n                  src={logoPath} \n                  alt=\"Topping Express\" \n                  className=\"h-14 w-auto object-contain\"\n                />\n                <div>\n                  <h1 className=\"text-xl font-bold text-blue-600\">Topping Express</h1>\n                  <p className=\"text-xs text-gray-500\">Express Shipping Solutions</p>\n                </div>\n              </div>\n            </div>\n            <nav className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-8\">\n                <a href=\"/\" className=\"text-gray-600 hover:text-blue-600 px-3 py-2 text-sm font-medium\">Get Quote</a>\n                <a href=\"/track\" className=\"text-blue-600 font-semibold px-3 py-2 text-sm\">Track Package</a>\n                <a href=\"/contact\" className=\"text-gray-600 hover:text-blue-600 px-3 py-2 text-sm font-medium\">Contact</a>\n              </div>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <div className=\"text-center mb-8\">\n            <motion.h1 \n              className=\"text-3xl font-bold text-gray-900 mb-4\"\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.2, duration: 0.6 }}\n            >\n              Track Your Package\n            </motion.h1>\n            <p className=\"text-lg text-gray-600\">\n              Enter your tracking number to get real-time updates on your shipment\n            </p>\n          </div>\n\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Package className=\"w-5 h-5\" />\n                Package Tracking\n              </CardTitle>\n              <CardDescription>\n                Enter your tracking number to view your package status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"tracking\">Tracking Number</Label>\n                  <Input\n                    id=\"tracking\"\n                    placeholder=\"Enter tracking number (e.g., TC-20250828-1234)\"\n                    value={trackingNumber}\n                    onChange={(e) => setTrackingNumber(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleTrack()}\n                    data-testid=\"input-tracking-number\"\n                  />\n                </div>\n                <div className=\"flex items-end\">\n                  <Button \n                    onClick={handleTrack} \n                    disabled={isLoading}\n                    data-testid=\"button-track\"\n                  >\n                    {isLoading ? (\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <Search className=\"w-4 h-4\" />\n                      </motion.div>\n                    ) : (\n                      <Search className=\"w-4 h-4 mr-2\" />\n                    )}\n                    Track\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {trackingData && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    {getStatusIcon(trackingData.status)}\n                    Package Status\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-500\">Status</Label>\n                        <p className=\"text-lg font-semibold capitalize\">{trackingData.status}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-500\">Last Update</Label>\n                        <p className=\"text-lg\">{trackingData.lastUpdate || 'N/A'}</p>\n                      </div>\n                    </div>\n                    \n                    {trackingData.location && (\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-500\">Current Location</Label>\n                        <p className=\"text-lg\">{trackingData.location}</p>\n                      </div>\n                    )}\n\n                    {trackingData.estimatedDelivery && (\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-500\">Estimated Delivery</Label>\n                        <p className=\"text-lg\">{trackingData.estimatedDelivery}</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":8150}},"version":1}